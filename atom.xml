<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHOAMI</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://echoingursb.github.io/"/>
  <updated>2017-10-01T12:41:09.968Z</updated>
  <id>http://echoingursb.github.io/</id>
  
  <author>
    <name>echo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>What Remains of Edith Finch</title>
    <link href="http://echoingursb.github.io/2017/10/01/What-Remains-of-Edith-Finch/"/>
    <id>http://echoingursb.github.io/2017/10/01/What-Remains-of-Edith-Finch/</id>
    <published>2017-10-01T12:17:32.000Z</published>
    <updated>2017-10-01T12:41:09.968Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>What Remains of Edith Finch<br><a id="more"></a><br><div id="dplayer0" class="dplayer" style="margin-bottom: 20px;"></div><script>var dplayer0 = new DPlayer({"element":document.getElementById("dplayer0"),"autoplay":0,"theme":"#FADFA3","loop":1,"video":{"url":"http://devtest.qiniudn.com/若能绽放光芒.mp4","pic":"http://devtest.qiniudn.com/若能绽放光芒.png"},"danmaku":{"api":"http://dplayer.daoapp.io","id":"9E2E3368B56CDBB4","token":"tokendemo","addition":["https://dplayer.daoapp.io/bilibili?aid"]}});</script><!-- dplayer used1 --></p>
<embed height="415" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="//static.hdslb.com/miniloader.swf" flashvars="aid=10853395&page=1" pluginspage="//www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What Remains of Edith Finch&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://echoingursb.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="游戏" scheme="http://echoingursb.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>函数-(1)函数定义和调用</title>
    <link href="http://echoingursb.github.io/2017/09/27/%E5%87%BD%E6%95%B0-1-%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8/"/>
    <id>http://echoingursb.github.io/2017/09/27/函数-1-函数定义和调用/</id>
    <published>2017-09-27T03:39:25.000Z</published>
    <updated>2017-10-01T09:51:07.962Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>函数-(1)函数定义和调用</p>
<a id="more"></a>
<p>在JavaScript中，定义函数的方式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function abs(x) &#123;</div><div class="line">    if (x &gt;= 0) &#123;</div><div class="line">        return x;</div><div class="line">    &#125; else &#123;</div><div class="line">        return -x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述<code>abs()</code>函数的定义如下：</p>
<ul>
<li><code>function</code>指出这是一个函数定义；</li>
<li><code>abs</code>是函数的名称；</li>
<li><code>(x)</code>括号内列出函数的参数，多个参数以,分隔；</li>
<li><code>{ ... }</code>之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</li>
</ul>
<p>请注意，函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>
<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>undefined</code>。</p>
<p>由于JavaScript的函数也是一个对象，上述定义的<code>abs()</code>函数实际上是一个函数对象，而函数名<code>abs</code>可以视为指向该函数的变量。</p>
<p>因此，第二种定义函数的方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var abs = function (x) &#123;</div><div class="line">    if (x &gt;= 0) &#123;</div><div class="line">        return x;</div><div class="line">    &#125; else &#123;</div><div class="line">        return -x;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在这种方式下，<code>function (x) { ... }</code>是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量<code>abs</code>，所以，通过变量<code>abs</code>就可以调用该函数。</p>
<p>上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个<code>;</code>，表示赋值语句结束。</p>
<p>调用函数</p>
<p>调用函数时，按顺序传入参数即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">abs(10); // 返回10</div><div class="line">abs(-9); // 返回9</div></pre></td></tr></table></figure>
<p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">abs(10, &apos;blablabla&apos;); // 返回10</div><div class="line">abs(-9, &apos;haha&apos;, &apos;hehe&apos;, null); // 返回9</div></pre></td></tr></table></figure>
<p>传入的参数比定义的少也没有问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">abs(); // 返回NaN</div></pre></td></tr></table></figure>
<p>此时<code>abs(x)</code>函数的参数<code>x</code>将收到<code>undefined</code>，计算结果为<code>NaN</code>。</p>
<p>要避免收到<code>undefined</code>，可以对参数进行检查：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function abs(x) &#123;</div><div class="line">    if (typeof x !== &apos;number&apos;) &#123;</div><div class="line">        throw &apos;Not a number&apos;;</div><div class="line">    &#125;</div><div class="line">    if (x &gt;= 0) &#123;</div><div class="line">        return x;</div><div class="line">    &#125; else &#123;</div><div class="line">        return -x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>arguments</p>
<p>JavaScript还有一个免费赠送的关键字<code>arguments</code>，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<code>arguments</code>类似<code>Array</code>但它不是一个<code>Array</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function foo(x) &#123;</div><div class="line">    alert(x); // 10</div><div class="line">    for (var i=0; i&lt;arguments.length; i++) &#123;</div><div class="line">        alert(arguments[i]); // 10, 20, 30</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foo(10, 20, 30);</div></pre></td></tr></table></figure>
<p>利用<code>arguments</code>，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function abs() &#123;</div><div class="line">    if (arguments.length === 0) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    var x = arguments[0];</div><div class="line">    return x &gt;= 0 ? x : -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line">abs(); // 0</div><div class="line">abs(10); // 10</div><div class="line">abs(-9); // 9</div></pre></td></tr></table></figure>
<p>实际上<code>arguments</code>最常用于判断传入参数的个数。你可能会看到这样的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// foo(a[, b], c)</div><div class="line">// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：</div><div class="line">function foo(a, b, c) &#123;</div><div class="line">    if (arguments.length === 2) &#123;</div><div class="line">        // 实际拿到的参数是a和b，c为undefined</div><div class="line">        c = b; // 把b赋给c</div><div class="line">        b = null; // b变为默认值</div><div class="line">    &#125;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要把中间的参数<code>b</code>变为“可选”参数，就只能通过<code>arguments</code>判断，然后重新调整参数并赋值。</p>
<p>rest参数</p>
<p>由于JavaScript函数允许接收任意个参数，于是我们就不得不用<code>arguments</code>来获取所有参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function foo(a, b) &#123;</div><div class="line">    var i, rest = [];</div><div class="line">    if (arguments.length &gt; 2) &#123;</div><div class="line">        for (i = 2; i&lt;arguments.length; i++) &#123;</div><div class="line">            rest.push(arguments[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    console.log(&apos;a = &apos; + a);</div><div class="line">    console.log(&apos;b = &apos; + b);</div><div class="line">    console.log(rest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了获取除了已定义参数<code>a</code>、<code>b</code>之外的参数，我们不得不用<code>arguments</code>，并且循环要从索引<code>2</code>开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的<code>rest</code>参数，有没有更好的方法？</p>
<p>ES6标准引入了<code>rest</code>参数，上面的函数可以改写为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function foo(a, b, ...rest) &#123;</div><div class="line">    console.log(&apos;a = &apos; + a);</div><div class="line">    console.log(&apos;b = &apos; + b);</div><div class="line">    console.log(rest);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(1, 2, 3, 4, 5);</div><div class="line">// 结果:</div><div class="line">// a = 1</div><div class="line">// b = 2</div><div class="line">// Array [ 3, 4, 5 ]</div><div class="line"></div><div class="line">foo(1);</div><div class="line">// 结果:</div><div class="line">// a = 1</div><div class="line">// b = undefined</div><div class="line">// Array []</div></pre></td></tr></table></figure>
<p><code>rest</code>参数只能写在最后，前面用<code>...</code>标识，从运行结果可知，传入的参数先绑定<code>a</code>、<code>b</code>，多余的参数以数组形式交给变量<code>rest</code>，所以，不再需要<code>arguments</code>我们就获取了全部参数。</p>
<p>如果传入的参数连正常定义的参数都没填满，也不要紧，<code>rest</code>参数会接收一个空数组（注意不是<code>undefined</code>）。</p>
<p>因为<code>rest</code>参数是ES6新标准，所以你需要测试一下浏览器是否支持。请用<code>rest</code>参数编写一个<code>sum()</code>函数，接收任意个参数并返回它们的和：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function sum(...rest) &#123;</div><div class="line">    var result = 0;</div><div class="line">    for (value of rest) &#123;</div><div class="line">        result += value;</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//测试：</div><div class="line">var i, args = [];</div><div class="line">for (i = 0; i &lt;= 100; i++) &#123;</div><div class="line">    args.push(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (sum() !== 0) &#123;</div><div class="line">    console.log(&apos;测试失败：sum()= &apos; + sum());</div><div class="line">&#125; else if (sum(1) !== 1) &#123;</div><div class="line">    console.log(&apos;测试失败：sum(1)= &apos; + sum(1));</div><div class="line">&#125; else if (sum(2, 3) !== 5) &#123;</div><div class="line">    console.log(&apos;测试失败：sum(2,3)= &apos; + sum(2, 3));</div><div class="line">&#125; else if (sum.apply(null, args) !== 5050) &#123;</div><div class="line">    console.log(&apos;测试失败：sum(1,2,3,...,100)&apos; + sum.apply(null, args));</div><div class="line">&#125; else &#123;</div><div class="line">    console.log(&apos;测试通过！&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>小心你的return语句</p>
<p>前面我们讲到了JavaScript引擎有一个在行末自动添加分号的机制，这可能让你栽到<code>return</code>语句的一个大坑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    return &#123; name: &apos;foo&apos; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); // &#123; name: &apos;foo&apos; &#125;</div></pre></td></tr></table></figure>
<p>如果把<code>return</code>语句拆成两行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    return</div><div class="line">        &#123; name: &apos;foo&apos; &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); // undefined</div></pre></td></tr></table></figure>
<p>要小心了，由于JavaScript引擎在行末自动添加分号的机制，上面的代码实际上变成了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    return; // 自动添加了分号，相当于return undefined;</div><div class="line">        &#123; name: &apos;foo&apos; &#125;; // 这行语句已经没法执行到了</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以正确的多行写法是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function foo() &#123;</div><div class="line">    return &#123; // 这里不会自动加分号，因为&#123;表示语句尚未结束</div><div class="line">        name: &apos;foo&apos;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>练习</p>
<p>定义一个计算圆面积的函数<code>area_of_circle()</code>，它有两个参数：</p>
<ul>
<li>r: 表示圆的半径；</li>
<li>pi: 表示π的值，如果不传，则默认3.14<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function area_of_circle(r, pi) &#123;</div><div class="line">    var temp = 3.14;</div><div class="line">    if (arguments.length &gt; 1) &#123;</div><div class="line">        temp = pi;</div><div class="line">    &#125;</div><div class="line">    return temp * r * r;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (area_of_circle(2) == 12.56 &amp;&amp; area_of_circle(2, 3.1416) == 12.5664) &#123;</div><div class="line">    console.log(&apos;测试通过&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    console.log(&apos;测试失败&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Max是一个JavaScript新手，他写了一个<code>max()</code>函数，返回两个数中较大的那个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">function max(a, b) &#123;</div><div class="line">    if (a &gt; b) &#123;</div><div class="line">        return</div><div class="line">                a;</div><div class="line">    &#125; else &#123;</div><div class="line">        return</div><div class="line">                b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(max(15, 20));</div></pre></td></tr></table></figure></p>
<p>但是Max抱怨他的浏览器出问题了，无论传入什么数，<font color="#FF0000"><code>max()</code></font>函数总是返回<font color="#FF0000"><code>undefined</code></font>。请帮他指出问题并修复。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">function max(a, b) &#123;</div><div class="line">    if (a &gt; b) &#123;</div><div class="line">        return a;</div><div class="line">    &#125; else &#123;</div><div class="line">        return b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(max(15, 20));</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数-(1)函数定义和调用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="http://echoingursb.github.io/2017/09/15/%E5%87%BD%E6%95%B0/"/>
    <id>http://echoingursb.github.io/2017/09/15/函数/</id>
    <published>2017-09-15T07:14:21.000Z</published>
    <updated>2017-09-25T05:52:43.173Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>函数</p>
<a id="more"></a>
<p>我们知道圆的面积计算公式为：</p>
<p><code>S = πr^2</code></p>
<p>当我们知道半径<code>r</code>的值时，就可以根据公式计算出面积。假设我们需要计算3个不同大小的圆的面积：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var r1 = 12.34;</div><div class="line">var r2 = 9.08;</div><div class="line">var r3 = 73.1;</div><div class="line">var s1 = 3.14 * r1 * r1;</div><div class="line">var s2 = 3.14 * r2 * r2;</div><div class="line">var s3 = 3.14 * r3 * r3;</div></pre></td></tr></table></figure>
<p>当代码出现有规律的重复的时候，你就需要当心了，每次写<code>3.14 * x * x</code>不仅很麻烦，而且，如果要把<code>3.14</code>改成<code>3.14159265359</code>的时候，得全部替换。</p>
<p>有了函数，我们就不再每次写<code>s = 3.14 * x * x</code>，而是写成更有意义的函数调用<code>s = area_of_circle(x)</code>，而函数<code>area_of_circle</code>本身只需要写一次，就可以多次调用。</p>
<p>基本上所有的高级语言都支持函数，JavaScript也不例外。JavaScript的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。</p>
<p>抽象</p>
<p>抽象是数学中非常常见的概念。举个例子：</p>
<p>计算数列的和，比如：<code>1 + 2 + 3 + ... + 100</code>，写起来十分不方便，于是数学家发明了求和符号<code>∑</code>，可以把<code>1 + 2 + 3 + ... + 100</code>记作：</p>
<p>这种抽象记法非常强大，因为我们看到 <code>∑</code>就可以理解成求和，而不是还原成低级的加法运算。</p>
<p>而且，这种抽象记法是可扩展的，比如：</p>
<p>还原成加法运算就变成了：</p>
<p><code>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)</code></p>
<p>可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。</p>
<p>写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(9)iterable</title>
    <link href="http://echoingursb.github.io/2017/09/14/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(9)iterable/"/>
    <id>http://echoingursb.github.io/2017/09/14/快速入门-(9)iterable/</id>
    <published>2017-09-14T05:46:39.000Z</published>
    <updated>2017-09-14T06:19:49.420Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(9)iterable</p>
<a id="more"></a>
<p>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6标准引入了新的<code>iterable</code>类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>iterable</code>类型。</p>
<p>具有<code>iterable</code>类型的集合可以通过新的<code>for ... of</code>循环来遍历。</p>
<p><code>for ... of</code>循环是ES6引入的新的语法，请测试你的浏览器是否支持：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var a = [1, 2, 3];</div><div class="line">for (var x of a) &#123;</div><div class="line">&#125;</div><div class="line">alert(&apos;你的浏览器支持for ... of&apos;);</div></pre></td></tr></table></figure>
<p>用<code>for ... of</code>循环遍历集合，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]);</div><div class="line">var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]);</div><div class="line">for (var x of a) &#123; // 遍历Array</div><div class="line">    alert(x); // A,B,C</div><div class="line">&#125;</div><div class="line">for (var x of s) &#123; // 遍历Set</div><div class="line">    alert(x); // A,B,C</div><div class="line">&#125;</div><div class="line">for (var x of m) &#123; // 遍历Map</div><div class="line">    alert(x[0] + &apos;=&apos; + x[1]); // 1=x,2=y,3=z</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可能会有疑问，<code>for ... of</code>循环和<code>for ... in</code>循环有何区别？</p>
<p><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个<code>Array</code>数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p>
<p>当我们手动给Array对象添加了额外的属性后，for … in循环将带来意想不到的意外效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">a.name = &apos;Hello&apos;;</div><div class="line">for (var x in a) &#123;</div><div class="line">    alert(x); // 0,1,2,name (遍历的实际上是对象的属性名称)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for ... in</code>循环将把<code>name</code>包括在内，但<code>Array</code>的<code>length</code>属性却不包括在内。</p>
<p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">a.name = &apos;Hello&apos;;</div><div class="line">for (var x of a) &#123;</div><div class="line">    alert(x); // A,B,C (循环集合本身的元素)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是为什么要引入新的<code>for ... of</code>循环。</p>
<p>然而，更好的方式是直接使用<code>iterable</code>内置的<code>forEach</code>方法，它接收一个函数，每次迭代就自动回调该函数。以<code>Array</code>为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">a.forEach(function (element, index, array) &#123;</div><div class="line">    // element: 指向当前元素的值 // A,B,C</div><div class="line">    // index: 指向当前索引 // 0,1,2</div><div class="line">    // array: 指向Array对象本身 // A,B,C  A,B,C  A,B,C</div><div class="line">    alert(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>注意</em>，<code>forEach()</code>方法是ES5.1标准引入的，你需要测试浏览器是否支持。</p>
<p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]);</div><div class="line">s.forEach(function (element, sameElement, set) &#123;</div><div class="line">    alert(element); // A,B,C</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]);</div><div class="line">m.forEach(function (value, key, map) &#123;</div><div class="line">    alert(value); // x,y,z</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得<code>Array</code>的<code>element</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">a.forEach(function (element) &#123;</div><div class="line">    alert(element); // A,B,C</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(9)iterable&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(8)Map和Set</title>
    <link href="http://echoingursb.github.io/2017/09/13/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(8)Map%E5%92%8CSet/"/>
    <id>http://echoingursb.github.io/2017/09/13/快速入门-(8)Map和Set/</id>
    <published>2017-09-13T06:32:44.000Z</published>
    <updated>2017-09-13T06:46:47.506Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(8)Map和Set</p>
<a id="more"></a>
<p>JavaScript的默认对象表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组键值对。</p>
<p>但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p>
<p>为了解决这个问题，最新的ES6规范引入了新的数据类型<code>Map</code>。要测试你的浏览器是否支持ES6规范，请执行以下代码，如果浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var m = new Map();</div><div class="line">var s = new Set();</div><div class="line">alert(&apos;你的浏览器支持Map和Set！&apos;);</div></pre></td></tr></table></figure>
<p>Map</p>
<p><code>Map</code>是一组键值对的结构，具有极快的查找速度。</p>
<p>举个例子，假设要根据同学的名字查找对应的成绩，如果用<code>Array</code>实现，需要两个<code>Array</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var names = [&apos;Michael&apos;, &apos;Bob&apos;, &apos;Tracy&apos;];</div><div class="line">var scores = [95, 75, 85];</div></pre></td></tr></table></figure>
<p>给定一个名字，要查找对应的成绩，就先要在<code>names</code>中找到对应的位置，再从<code>scores</code>取出对应的成绩，<code>Array</code>越长，耗时越长。</p>
<p>如果用<code>Map</code>实现，只需要一个<code>“名字”-“成绩”</code>的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个<code>Map</code>如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var m = new Map([[&apos;Michael&apos;, 95], [&apos;Bob&apos;, 75], [&apos;Tracy&apos;, 85]]);</div><div class="line">m.get(&apos;Michael&apos;); // 95</div></pre></td></tr></table></figure>
<p>初始化<code>Map</code>需要一个二维数组，或者直接初始化一个空<code>Map</code>。<code>Map</code>具有以下方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var m = new Map(); // 空Map</div><div class="line">m.set(&apos;Adam&apos;, 67); // 添加新的key-value</div><div class="line">m.set(&apos;Bob&apos;, 59);</div><div class="line">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true</div><div class="line">m.get(&apos;Adam&apos;); // 67</div><div class="line">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;</div><div class="line">m.get(&apos;Adam&apos;); // undefined</div></pre></td></tr></table></figure>
<p>由于一个<code>key</code>只能对应一个<code>value</code>，所以，多次对一个<code>key</code>放入<code>value</code>，后面的值会把前面的值冲掉：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var m = new Map();</div><div class="line">m.set(&apos;Adam&apos;, 67);</div><div class="line">m.set(&apos;Adam&apos;, 88);</div><div class="line">m.get(&apos;Adam&apos;); // 88</div></pre></td></tr></table></figure>
<p>Set</p>
<p><code>Set</code>和<code>Map</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>Set</code>中，没有重复的<code>key</code>。</p>
<p>要创建一个<code>Set</code>，需要提供一个<code>Array</code>作为输入，或者直接创建一个空<code>Set</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s1 = new Set(); // 空Set</div><div class="line">var s2 = new Set([1, 2, 3]); // 含1, 2, 3</div></pre></td></tr></table></figure>
<p>重复元素在<code>Set</code>中自动被过滤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s = new Set([1, 2, 3, 3, &apos;3&apos;]);</div><div class="line">s; // Set &#123;1, 2, 3, &quot;3&quot;&#125;</div></pre></td></tr></table></figure>
<p>注意数字<code>3</code>和字符串<code>&#39;3&#39;</code>是不同的元素。</p>
<p>通过<code>add(key)</code>方法可以添加元素到<code>Set</code>中，可以重复添加，但不会有效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.add(4)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 4&#125;</div><div class="line">&gt;&gt;&gt; s.add(4)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;1, 2, 3, 4&#125;</div></pre></td></tr></table></figure>
<p>通过<code>delete(key)</code>方法可以删除元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var s = new Set([1, 2, 3]);</div><div class="line">s; // Set &#123;1, 2, 3&#125;</div><div class="line">s.delete(3);</div><div class="line">s; // Set &#123;1, 2&#125;</div></pre></td></tr></table></figure>
<p>小结</p>
<p><code>Map</code>和<code>Set</code>是ES6标准新增的数据类型，请根据浏览器的支持情况决定是否要使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(8)Map和Set&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(7)循环</title>
    <link href="http://echoingursb.github.io/2017/09/12/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(7)%E5%BE%AA%E7%8E%AF/"/>
    <id>http://echoingursb.github.io/2017/09/12/快速入门-(7)循环/</id>
    <published>2017-09-12T03:18:03.000Z</published>
    <updated>2017-09-13T06:35:45.755Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(7)循环</p>
<a id="more"></a>
<p>要计算<code>1+2+3</code>，我们可以直接写表达式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1 + 2 + 3; // 6</div></pre></td></tr></table></figure>
<p>要计算<code>1+2+3+...+10</code>，勉强也能写出来。</p>
<p>但是，要计算<code>1+2+3+...+10000</code>，直接写表达式就不可能了。</p>
<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p>
<p>JavaScript的循环有两种，一种是<code>for</code>循环，通过初始条件、结束条件和递增条件来循环执行语句块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x = 0;</div><div class="line">var i;</div><div class="line">for (i=1; i&lt;=10000; i++) &#123;</div><div class="line">    x = x + i;</div><div class="line">&#125;</div><div class="line">x; // 50005000</div></pre></td></tr></table></figure>
<p>让我们来分析一下for循环的控制条件：</p>
<ul>
<li><code>i=1</code> 这是初始条件，将变量i置为1；</li>
<li><code>i&lt;=10000</code> 这是判断条件，满足时就继续循环，不满足就退出循环；</li>
<li><code>i++</code> 这是每次循环后的递增条件，由于每次循环后变量<code>i</code>都会加<code>1</code>，因此它终将在若干次循环后不满足判断条件<code>i&lt;=10000</code>而退出循环。</li>
</ul>
<p>练习</p>
<p>利用<code>for</code>循环计算<code>1 * 2 * 3 * ... * 10</code>的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">use &apos;strict&apos;;</div><div class="line">var x = 1;</div><div class="line">for (var i=1; i&lt;=10; i++) &#123;</div><div class="line">    x = x * i;</div><div class="line">&#125;</div><div class="line">alert(x);</div><div class="line">if (x===3628800) &#123;</div><div class="line">    alert(&apos;1 * 2 * 3 * ... * 10 = &apos;+ x);</div><div class="line">&#125;else &#123;</div><div class="line">    alert(&apos;计算错误&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for</code>循环最常用的地方是利用索引来遍历数组：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;Apple&apos;,&apos;Google&apos;,&apos;Microsoft&apos;];</div><div class="line">var x;</div><div class="line">for (var i =0;i&lt;arr.length;i++) &#123;</div><div class="line">    x = arr[i];</div><div class="line">    alert(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for</code>循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用<code>break</code>语句退出循环，否则就是死循环：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var x = 0;</div><div class="line">for (;;) &#123; // 将无限循环下去</div><div class="line">    if (x &gt; 100) &#123;</div><div class="line">        break; // 通过if判断来退出循环</div><div class="line">    &#125;</div><div class="line">    x ++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for … in</p>
<p><code>for</code>循环的一个变体是<code>for ... in</code>循环，它可以把一个对象的所有属性依次循环出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">    name: &apos;Jack&apos;,</div><div class="line">    age: 20,</div><div class="line">    city: &apos;Beijing&apos;</div><div class="line">&#125;;</div><div class="line">for (var key in o) &#123;</div><div class="line">    alert(key); // name, age, city</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要过滤掉对象继承的属性，用<code>hasOwnProperty()</code>来实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">    name: &apos;Jack&apos;,</div><div class="line">    age: 20,</div><div class="line">    city: &apos;Beijing&apos;</div><div class="line">&#125;;</div><div class="line">for (var key in o) &#123;</div><div class="line">    if (o.hasOwnProperty(key)) &#123;</div><div class="line">        alert(key); // name, age, city</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于<code>Array</code>也是对象，而它的每个元素的索引被视为对象的属性，因此，<code>for ... in</code>循环可以直接循环出<code>Array</code>的索引：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;];</div><div class="line">for (var i in a) &#123;</div><div class="line">    alert(i); // 0,1,2</div><div class="line">    alert(arr[i]); // A,B,C</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>请注意</em>，<code>for ... in</code>对<code>Array</code>的循环得到的是<code>String</code>而不是<code>Number</code>。</p>
<p>while</p>
<p><code>for</code>循环在已知循环的初始和结束条件时非常有用。而上述忽略了条件的<code>for</code>循环容易让人看不清循环的逻辑，此时用<code>while</code>循环更佳。</p>
<p><code>while</code>循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用<code>while</code>循环实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//1.for循环</div><div class="line">var x = 0;</div><div class="line">for (var i =1;i&lt;=100;i+=2) &#123;</div><div class="line">    x = x + i;</div><div class="line">&#125;</div><div class="line">alert(x); // 2500</div><div class="line"></div><div class="line">//2.while循环(循环条件自增)</div><div class="line">var y = 0;</div><div class="line">var m = 1;</div><div class="line">while (m&lt;=100) &#123;</div><div class="line">    y = y + m;</div><div class="line">    m += 2;</div><div class="line">&#125;</div><div class="line">alert(y); // 2500</div><div class="line"></div><div class="line">//3.whille循环(循环条件自减)</div><div class="line">var z =0;</div><div class="line">var n = 99;</div><div class="line">while ( n&gt;=0) &#123;</div><div class="line">    z = z + n;</div><div class="line">    n -= 2;</div><div class="line">&#125;</div><div class="line">alert(z);// 2500</div></pre></td></tr></table></figure>
<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足<code>while</code>条件，循环退出。</p>
<p>do … while</p>
<p>最后一种循环是<code>do { ... } while()</code>循环，它和<code>while</code>循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var n = 0;</div><div class="line">do &#123;</div><div class="line">    n = n + 1;</div><div class="line">&#125; while (n &lt; 100);</div><div class="line">n; // 100</div></pre></td></tr></table></figure>
<p>用<code>do { ... } while()</code>循环要小心，循环体会至少执行<code>1</code>次，而<code>for</code>和<code>while</code>循环则可能一次都不执行。</p>
<p>练习</p>
<p>请利用循环遍历数组中的每个名字，并显示<code>Hello, xxx!</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use &apos;strict&apos;;</div><div class="line">var arr = [&apos;Bart&apos;,&apos;Lisa&apos;,&apos;Adam&apos;];</div><div class="line">for (var i=0;i&lt;arr.length;i++) &#123;</div><div class="line">    alert(&apos;Hello,&apos; + arr[i]+ &apos;!&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(7)循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(6)条件判断</title>
    <link href="http://echoingursb.github.io/2017/09/12/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(6)%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
    <id>http://echoingursb.github.io/2017/09/12/快速入门-(6)条件判断/</id>
    <published>2017-09-12T02:44:12.000Z</published>
    <updated>2017-09-13T06:35:29.804Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(6)条件判断</p>
<a id="more"></a>
<p>JavaScript使用<code>if () { ... } else { ... }</code>来进行条件判断。例如，根据年龄显示不同内容，可以用<code>if</code>语句实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var age = 20;</div><div class="line">if (age &gt;= 18) &#123; // 如果age &gt;= 18为true，则执行if语句块</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">&#125; else &#123; // 否则执行else语句块</div><div class="line">    alert(&apos;teenager&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>else</code>语句是可选的。如果语句块只包含一条语句，那么可以省略<code>{}</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var age = 20;</div><div class="line">if (age &gt;= 18) </div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">else</div><div class="line">    alert(&apos;teenager&apos;);</div></pre></td></tr></table></figure>
<p>省略<code>{}</code>的危险之处在于，如果后来想添加一些语句，却忘了写<code>{}</code>，就改变了<code>if...else...</code>的语义，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var age = 20;</div><div class="line">if (age &gt;= 18)</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">else</div><div class="line">    console.log(&apos;age &lt; 18&apos;); // 添加一行日志</div><div class="line">    alert(&apos;teenager&apos;); // &lt;- 这行语句已经不在else的控制范围了</div></pre></td></tr></table></figure>
<p>上述代码的<code>else</code>子句实际上只负责执行<code>console.log(&#39;age &lt; 18&#39;);</code>，原有的<code>alert(&#39;teenager&#39;);</code>已经不属于<code>if...else...</code>的控制范围了，它每次都会执行。</p>
<p>相反地，有<code>{}</code>的语句就不会出错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var age = 20;</div><div class="line">if (age &gt;= 18) &#123;</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    console.log(&apos;age &lt; 18&apos;);</div><div class="line">    alert(&apos;teenager&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是为什么我们建议永远都要写上<code>{}</code>。</p>
<p>多行条件判断</p>
<p>如果还要更细致地判断条件，可以使用多个<code>if...else...</code>的组合：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var age = 3;</div><div class="line">if (age &gt;= 18) &#123;</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">&#125; else if (age &gt;= 6) &#123;</div><div class="line">    alert(&apos;teenager&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    alert(&apos;kid&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是我们通常把<code>else if</code>连写在一起，来增加可读性。这里的<code>else</code>略掉了<code>{}</code>是没有问题的，因为它只包含一个<code>if</code>语句。注意最后一个单独的<code>else</code>不要略掉<code>{}</code>。</p>
<p><em>请注意</em>，<code>if...else...</code>语句的执行特点是二选一，在多个<code>if...else...</code>语句中，如果某个条件成立，则后续就不再继续判断了。</p>
<p>试解释为什么下面的代码显示的是<code>teenager</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var age = 20;</div><div class="line">if (age &gt;= 6) &#123;</div><div class="line">    alert(&apos;teenager&apos;);</div><div class="line">&#125; else if (age &gt;= 18) &#123;</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    alert(&apos;kid&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于<code>age</code>的值为<code>20</code>，它实际上同时满足条件<code>age &gt;= 6</code>和<code>age &gt;= 18</code>，这说明条件判断的顺序非常重要。请修复后让其显示<code>adult</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var age = 20;</div><div class="line">if (age &gt;= 20) &#123;</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">&#125; else if (age &gt;= 18) &#123;</div><div class="line">    alert(&apos;teenager&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    alert(&apos;kid&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>if</code>的条件判断语句结果不是<code>true</code>或<code>false</code>怎么办？例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var s = &apos;123&apos;;</div><div class="line">if (s.length) &#123; // 条件计算结果为3</div><div class="line">    //</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串<code>&#39;&#39;</code>视为<code>false</code>，其他值一概视为<code>true</code>，因此上述代码条件判断的结果是<code>true</code>。</p>
<p>练习</p>
<p>小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：</p>
<ul>
<li>低于18.5：过轻</li>
<li>18.5-25：正常</li>
<li>25-28：过重</li>
<li>28-32：肥胖</li>
<li>高于32：严重肥胖</li>
</ul>
<p>用<code>if...else...</code>判断并显示结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var weight = parseFloat(prompt(&apos;请输入体重(kg)：&apos;));</div><div class="line">var height = parseFloat(prompt(&apos;请输入身高(m)：&apos;));</div><div class="line">var bmi = weight/(height * height);</div><div class="line">if (bmi&gt; 32) &#123;</div><div class="line">    alert(&apos;严重过胖&apos;);</div><div class="line">&#125; else if (bmi &gt;= 28) &#123;</div><div class="line">    alert(&apos;肥胖&apos;);</div><div class="line">&#125; else if (bmi &gt;= 25) &#123;</div><div class="line">    alert(&apos;过重&apos;);</div><div class="line">&#125; esle if (bmi &gt;= 18.5) &#123;</div><div class="line">    alert(&apos;正常&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    alert(&apos;过轻&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(6)条件判断&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(5)对象</title>
    <link href="http://echoingursb.github.io/2017/09/10/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(5)%E5%AF%B9%E8%B1%A1/"/>
    <id>http://echoingursb.github.io/2017/09/10/快速入门-(5)对象/</id>
    <published>2017-09-10T12:29:41.000Z</published>
    <updated>2017-09-13T06:35:07.794Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(5)对象</p>
<a id="more"></a>
<p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。</p>
<p>JavaScript的对象用于描述现实世界中的某个对象。例如，为了描述“小明”这个淘气的小朋友，我们可以用若干键值对来描述他：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;,</div><div class="line">    birth: 1990,</div><div class="line">    school: &apos;No.1 Middle School&apos;,</div><div class="line">    height: 1.70,</div><div class="line">    weight: 65,</div><div class="line">    score: null</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>JavaScript用一个<code>{...}</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开。注意，最后一个键值对不需要在末尾加<code>,</code>，如果加了<code>，</code>有的浏览器（如低版本的IE）将报错。</p>
<p>上述对象申明了一个<code>name</code>属性，值是<code>&#39;小明&#39;</code>，<code>birth</code>属性，值是<code>1990</code>，以及其他一些属性。最后，把这个对象赋值给变量<code>xiaoming</code>后，就可以通过变量<code>xiaoming</code>来获取小明的属性了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xiaoming.name; // &apos;小明&apos;</div><div class="line">xiaoming.birth; // 1990</div></pre></td></tr></table></figure>
<p>访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用<code>&#39;&#39;</code>括起来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var xiaohong = &#123;</div><div class="line">    name: &apos;小红&apos;,</div><div class="line">    &apos;middle-school&apos;: &apos;No.1 Middle School&apos;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>xiaohong</code>的属性名<code>middle-school</code>不是一个有效的变量，就需要用<code>&#39;&#39;</code>括起来。访问这个属性也无法使用<code>.</code>操作符，必须用<code>[&#39;xxx&#39;]</code>来访问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xiaohong[&apos;middle-school&apos;]; // &apos;No.1 Middle School&apos;</div><div class="line">xiaohong[&apos;name&apos;]; // &apos;小红&apos;</div><div class="line">xiaohong.name; // &apos;小红&apos;</div></pre></td></tr></table></figure>
<p>也可以用<code>xiaohong[&#39;name&#39;]</code>来访问<code>xiaohong</code>的<code>name</code>属性，不过<code>xiaohong.name</code>的写法更简洁。我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过<code>object.prop</code>的形式访问一个属性了。</p>
<p>实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p>
<p>如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回<code>undefined</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;</div><div class="line">&#125;;</div><div class="line">xiaoming.age; // undefined</div></pre></td></tr></table></figure>
<p>由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;</div><div class="line">&#125;;</div><div class="line">xiaoming.age; // undefined</div><div class="line">xiaoming.age = 18; // 新增一个age属性</div><div class="line">xiaoming.age; // 18</div><div class="line">delete xiaoming.age; // 删除age属性</div><div class="line">xiaoming.age; // undefined</div><div class="line">delete xiaoming[&apos;name&apos;]; // 删除name属性</div><div class="line">xiaoming.name; // undefined</div><div class="line">delete xiaoming.school; // 删除一个不存在的school属性也不会报错</div></pre></td></tr></table></figure>
<p>如果我们要检测<code>xiaoming</code>是否拥有某一属性，可以用<code>in</code>操作符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;,</div><div class="line">    birth: 1990,</div><div class="line">    school: &apos;No.1 Middle School&apos;,</div><div class="line">    height: 1.70,</div><div class="line">    weight: 65,</div><div class="line">    score: null</div><div class="line">&#125;;</div><div class="line">&apos;name&apos; in xiaoming; // true</div><div class="line">&apos;grade&apos; in xiaoming; // false</div></pre></td></tr></table></figure>
<p>不过要小心，如果<code>in</code>判断一个属性存在，这个属性不一定是<code>xiaoming</code>的，它可能是<code>xiaoming</code>继承得到的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;toString&apos; in xiaoming; // true</div></pre></td></tr></table></figure>
<p>因为<code>toString</code>定义在<code>object</code>对象中，而所有对象最终都会在原型链上指向<code>object</code>，所以<code>xiaoming</code>也拥有<code>toString</code>属性。</p>
<p>要判断一个属性是否是<code>xiaoming</code>自身拥有的，而不是继承得到的，可以用<code>hasOwnProperty()</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var xiaoming = &#123;</div><div class="line">    name: &apos;小明&apos;</div><div class="line">&#125;;</div><div class="line">xiaoming.hasOwnProperty(&apos;name&apos;); // true</div><div class="line">xiaoming.hasOwnProperty(&apos;toString&apos;); // false</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(5)对象&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(4)数组</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(4)%E6%95%B0%E7%BB%84/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门-(4)数组/</id>
    <published>2017-09-03T09:55:32.000Z</published>
    <updated>2017-09-13T06:34:52.636Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(4)数组</p>
<a id="more"></a>
<p>JavaScript的<code>Array</code>可以包含任意数据类型，并通过索引来访问每个元素。</p>
<p>要取得<code>Array</code>的长度，直接访问<code>length</code>属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3.14, &apos;Hello&apos;, null, true];</div><div class="line">arr.length; // 6</div></pre></td></tr></table></figure></p>
<p>请注意，直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3];</div><div class="line">arr.length; // 3</div><div class="line">arr.length = 6;</div><div class="line">arr; // arr变为[1, 2, 3, undefined, undefined, undefined]</div><div class="line">arr.length = 2;</div><div class="line">arr; // arr变为[1, 2]</div></pre></td></tr></table></figure></p>
<p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">arr[1] = 99;</div><div class="line">arr; // arr现在变为[&apos;A&apos;, 99, &apos;C&apos;]</div></pre></td></tr></table></figure></p>
<p>请注意，如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3];</div><div class="line">arr[5] = &apos;x&apos;;</div><div class="line">arr; // arr变为[1, 2, 3, undefined, undefined, &apos;x&apos;]</div></pre></td></tr></table></figure></p>
<p>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的<code>Array</code>却不会有任何错误。在编写代码时，不建议直接修改<code>Array</code>的大小，访问索引时要确保索引不会越界。</p>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>与<code>String</code>类似，<code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [10, 20, &apos;30&apos;, &apos;xyz&apos;];</div><div class="line">arr.indexOf(10); // 元素10的索引为0</div><div class="line">arr.indexOf(20); // 元素20的索引为1</div><div class="line">arr.indexOf(30); // 元素30没有找到，返回-1</div><div class="line">arr.indexOf(&apos;30&apos;); // 元素&apos;30&apos;的索引为2</div></pre></td></tr></table></figure></p>
<p>注意了，数字<code>30</code>和字符串<code>&#39;30&#39;</code>是不同的元素。</p>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><p><code>slice()</code>就是对应<code>String</code>的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;];</div><div class="line">arr.slice(0, 3); // 从索引0开始，到索引3结束，但不包括索引3: [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div><div class="line">arr.slice(3); // 从索引3开始到结束: [&apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;]</div></pre></td></tr></table></figure></p>
<p>注意到<code>slice()</code>的起止参数包括开始索引，不包括结束索引。</p>
<p>如果不给<code>slice()</code>传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个<code>Array</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;];</div><div class="line">var aCopy = arr.slice();</div><div class="line">aCopy; // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;F&apos;, &apos;G&apos;]</div><div class="line">aCopy === arr; // false</div></pre></td></tr></table></figure></p>
<h1 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h1><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2];</div><div class="line">arr.push(&apos;A&apos;, &apos;B&apos;); // 返回Array新的长度: 4</div><div class="line">arr; // [1, 2, &apos;A&apos;, &apos;B&apos;]</div><div class="line">arr.pop(); // pop()返回&apos;B&apos;</div><div class="line">arr; // [1, 2, &apos;A&apos;]</div><div class="line">arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次</div><div class="line">arr; // []</div><div class="line">arr.pop(); // 空数组继续pop不会报错，而是返回undefined</div><div class="line">arr; // []</div></pre></td></tr></table></figure></p>
<h1 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h1><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2];</div><div class="line">arr.unshift(&apos;A&apos;, &apos;B&apos;); // 返回Array新的长度: 4</div><div class="line">arr; // [&apos;A&apos;, &apos;B&apos;, 1, 2]</div><div class="line">arr.shift(); // &apos;A&apos;</div><div class="line">arr; // [&apos;B&apos;, 1, 2]</div><div class="line">arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次</div><div class="line">arr; // []</div><div class="line">arr.shift(); // 空数组继续shift不会报错，而是返回undefined</div><div class="line">arr; // []</div></pre></td></tr></table></figure></p>
<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;B&apos;, &apos;C&apos;, &apos;A&apos;];</div><div class="line">arr.sort();</div><div class="line">arr; // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div></pre></td></tr></table></figure>
<p>能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。</p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><p><code>reverse()</code>把整个<code>Array</code>的元素给掉个个，也就是反转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;];</div><div class="line">arr.reverse(); </div><div class="line">arr; // [&apos;three&apos;, &apos;two&apos;, &apos;one&apos;]</div></pre></td></tr></table></figure></p>
<h1 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h1><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Yahoo&apos;, &apos;AOL&apos;, &apos;Excite&apos;, &apos;Oracle&apos;];</div><div class="line">// 从索引2开始删除3个元素,然后再添加两个元素:</div><div class="line">arr.splice(2, 3, &apos;Google&apos;, &apos;Facebook&apos;); // 返回删除的元素 [&apos;Yahoo&apos;, &apos;AOL&apos;, &apos;Excite&apos;]</div><div class="line">arr; // [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Google&apos;, &apos;Facebook&apos;, &apos;Oracle&apos;]</div><div class="line">// 只删除,不添加:</div><div class="line">arr.splice(2, 2); // [&apos;Google&apos;, &apos;Facebook&apos;]</div><div class="line">arr; // [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Oracle&apos;]</div><div class="line">// 只添加,不删除:</div><div class="line">arr.splice(2, 0, &apos;Google&apos;, &apos;Facebook&apos;); // 返回[],因为没有删除任何元素</div><div class="line">arr; // [&apos;Microsoft&apos;, &apos;Apple&apos;, &apos;Google&apos;, &apos;Facebook&apos;, &apos;Oracle&apos;]</div></pre></td></tr></table></figure></p>
<h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h1><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">var added = arr.concat([1, 2, 3]);</div><div class="line">added; // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, 1, 2, 3]</div><div class="line">arr; // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]</div></pre></td></tr></table></figure></p>
<p>请注意，<code>concat()</code>方法并没有修改当前<code>Array</code>，而是返回了一个新的<code>Array</code>。</p>
<p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];</div><div class="line">arr.concat(1, 2, [3, 4]); // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, 1, 2, 3, 4]</div></pre></td></tr></table></figure></p>
<h1 id="join"><a href="#join" class="headerlink" title="join"></a>join</h1><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, 1, 2, 3];</div><div class="line">arr.join(&apos;-&apos;); // &apos;A-B-C-1-2-3&apos;</div></pre></td></tr></table></figure></p>
<p>如果<code>Array</code>的元素不是字符串，将自动转换为字符串后再连接。</p>
<h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var arr = [[1, 2, 3], [400, 500, 600], &apos;-&apos;];</div></pre></td></tr></table></figure></p>
<p>上述<code>Array</code>包含3个元素，其中头两个元素本身也是<code>Array</code>。</p>
<p>练习：如何通过索引取到500这个值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var arr = [[1, 2, 3], [400, 500, 600], &apos;-&apos;];</div><div class="line">var x = ??;</div><div class="line">alert(x); // x应该为500</div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Array提供了一种顺序存储一组元素的功能，并可以按索引来读写。</p>
<p>练习：在新生欢迎会上，你已经拿到了新同学的名单，请排序后显示：欢迎XXX，XXX，XXX和XXX同学！：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">var arr = [&apos;小明&apos;, &apos;小红&apos;, &apos;大军&apos;, &apos;阿黄&apos;];</div><div class="line">alert(&apos;???&apos;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(4)数组&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(3)字符串</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(3)%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门-(3)字符串/</id>
    <published>2017-09-03T08:43:39.000Z</published>
    <updated>2017-09-13T06:34:35.285Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(3)字符串</p>
<a id="more"></a>
<p>JavaScript的字符串就是用<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起来的字符表示。</p>
<p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，<code>空格</code>，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;I\&apos;m \&quot;OK\&quot;!&apos;;</div></pre></td></tr></table></figure></p>
<p>表示的字符串内容是：<code>I&#39;m &quot;OK&quot;!</code></p>
<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。</p>
<p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;\x41&apos;; // 完全等同于 &apos;A&apos;</div></pre></td></tr></table></figure></p>
<p>还可以用<code>\u####</code>表示一个Unicode字符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;\u4e2d\u6587&apos;; // 完全等同于 &apos;中文&apos;</div></pre></td></tr></table></figure></p>
<h1 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h1><p>由于多行字符串用<code>\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号表示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//`...`</div><div class="line">`这是一个</div><div class="line">多行</div><div class="line">字符串`;</div></pre></td></tr></table></figure>
<p><em>注意：反引号在键盘的ESC下方，数字键1的左边：</em></p>
<p>练习：测试你的浏览器是否支持ES6标准，如果不支持，请把多行字符串用<code>\n</code>重新表示出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 如果浏览器不支持ES6，将报SyntaxError错误:</div><div class="line">alert(`多行</div><div class="line">字符串</div><div class="line">测试`);</div></pre></td></tr></table></figure>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>要把多个字符串连接起来，可以用<code>+</code>号连接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var name = &apos;小明&apos;;</div><div class="line">var age = 20;</div><div class="line">var message = &apos;你好, &apos; + name + &apos;, 你今年&apos; + age + &apos;岁了!&apos;;</div><div class="line">alert(message);</div></pre></td></tr></table></figure></p>
<p>如果有很多变量需要连接，用<code>+</code>号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var name = &apos;小明&apos;;</div><div class="line">var age = 20;</div><div class="line">var message = `你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`;</div><div class="line">alert(message);</div></pre></td></tr></table></figure></p>
<p>练习：测试你的浏览器是否支持ES6模板字符串，如果不支持，请把模板字符串改为<code>+</code>连接的普通字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 如果浏览器支持模板字符串，将会替换字符串内部的变量:</div><div class="line">var name = &apos;小明&apos;;</div><div class="line">var age = 20;</div><div class="line">alert(`你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`);</div></pre></td></tr></table></figure>
<h1 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h1><p>字符串常见的操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s = &apos;Hello, world!&apos;;</div><div class="line">s.length; // 13</div></pre></td></tr></table></figure></p>
<p>要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var s = &apos;Hello, world!&apos;;</div><div class="line"></div><div class="line">s[0]; // &apos;H&apos;</div><div class="line">s[6]; // &apos; &apos;</div><div class="line">s[7]; // &apos;w&apos;</div><div class="line">s[12]; // &apos;!&apos;</div><div class="line">s[13]; // undefined 超出范围的索引不会报错，但一律返回undefined</div></pre></td></tr></table></figure></p>
<p>需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var s = &apos;Test&apos;;</div><div class="line">s[0] = &apos;X&apos;;</div><div class="line">alert(s); // s仍然为&apos;Test&apos;</div></pre></td></tr></table></figure></p>
<p>JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串：</p>
<p>toUpperCase</p>
<p><code>toUpperCase()</code>把一个字符串全部变为大写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s = &apos;Hello&apos;;</div><div class="line">s.toUpperCase(); // 返回&apos;HELLO&apos;</div></pre></td></tr></table></figure></p>
<p>toLowerCase</p>
<p><code>toLowerCase()</code>把一个字符串全部变为小写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var s = &apos;Hello&apos;;</div><div class="line">var lower = s.toLowerCase(); // 返回&apos;hello&apos;并赋值给变量lower</div><div class="line">lower; // &apos;hello&apos;</div></pre></td></tr></table></figure></p>
<p>indexOf</p>
<p><code>indexOf()</code>会搜索指定字符串出现的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var s = &apos;hello, world&apos;;</div><div class="line">s.indexOf(&apos;world&apos;); // 返回7</div><div class="line">s.indexOf(&apos;World&apos;); // 没有找到指定的子串，返回-1</div></pre></td></tr></table></figure></p>
<p>substring</p>
<p><code>substring()</code>返回指定索引区间的子串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var s = &apos;hello, world&apos;</div><div class="line">s.substring(0, 5); // 从索引0开始到5（不包括5），返回&apos;hello&apos;</div><div class="line">s.substring(7); // 从索引7开始到结束，返回&apos;world&apos;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(3)字符串&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(2)数据类型和变量</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(2)%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门-(2)数据类型和变量/</id>
    <published>2017-09-03T07:12:08.000Z</published>
    <updated>2017-09-13T06:34:18.285Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(2)数据类型和变量</p>
<a id="more"></a>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在JavaScript中定义了以下几种数据类型：</p>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">123; // 整数123</div><div class="line">0.456; // 浮点数0.456</div><div class="line">1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5</div><div class="line">-99; // 负数</div><div class="line">NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示</div><div class="line">Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</div></pre></td></tr></table></figure>
<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和<code>0-9</code>，<code>a-f</code>表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等，它们和十进制表示的数值完全一样。</p>
<p>Number可以直接做四则运算，规则和数学一致：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1 + 2; // 3</div><div class="line">(1 + 2) * 5 / 2; // 7.5</div><div class="line">2 / 0; // Infinity</div><div class="line">0 / 0; // NaN</div><div class="line">10 % 3; // 1</div><div class="line">10.5 % 3; // 1.5</div></pre></td></tr></table></figure>
<p>注意<code>%</code>是求余运算。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。</p>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>true</code>、<code>false</code>两种值，要么是<code>true</code>，要么是<code>false</code>，可以直接用<code>true</code>、<code>false</code>表示布尔值，也可以通过布尔运算计算出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">true; // 这是一个true值</div><div class="line">false; // 这是一个false值</div><div class="line">2 &gt; 1; // 这是一个true值</div><div class="line">2 &gt;= 3; // 这是一个false值</div></pre></td></tr></table></figure>
<p><code>&amp;&amp;</code>运算是与运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">true &amp;&amp; true; // 这个&amp;&amp;语句计算结果为true</div><div class="line">true &amp;&amp; false; // 这个&amp;&amp;语句计算结果为false</div><div class="line">false &amp;&amp; true &amp;&amp; false; // 这个&amp;&amp;语句计算结果为false</div></pre></td></tr></table></figure>
<p><code>||</code>运算是或运算，只要其中有一个为<code>true</code>，<code>||</code>运算结果就是<code>true</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">false || false; // 这个||语句计算结果为false</div><div class="line">true || false; // 这个||语句计算结果为true</div><div class="line">false || true || false; // 这个||语句计算结果为true</div></pre></td></tr></table></figure>
<p><code>!</code>运算是非运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，<code>false</code>变成<code>true</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">! true; // 结果为false</div><div class="line">! false; // 结果为true</div><div class="line">! (2 &gt; 5); // 结果为true</div></pre></td></tr></table></figure>
<p>布尔值经常用在条件判断中，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var age = 15;</div><div class="line">if (age &gt;= 18) &#123;</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    alert(&apos;teenager&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>当我们对Number做比较时，可以通过比较运算符得到一个布尔值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2 &gt; 5; // false</div><div class="line">5 &gt;= 2; // true</div><div class="line">7 == 7; // true</div></pre></td></tr></table></figure>
<p>实际上，JavaScript允许对任意数据类型做比较：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">false == 0; // true</div><div class="line">false === 0; // false</div></pre></td></tr></table></figure>
<p>要特别注意相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：</p>
<p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
<p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>
<p>由于JavaScript这个设计缺陷，不要使用<code>==</code>比较，始终坚持使用<code>===</code>比较。</p>
<p>另一个例外是<code>NaN</code>这个特殊的<code>Number</code>与所有其他值都不相等，包括它自己：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NaN === NaN; // false</div></pre></td></tr></table></figure></p>
<p>唯一能判断NaN的方法是通过<code>isNaN()</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isNaN(NaN); // true</div></pre></td></tr></table></figure></p>
<p>最后要注意浮点数的相等比较：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1 / 3 === (1 - 2 / 3); // false</div></pre></td></tr></table></figure></p>
<p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</div></pre></td></tr></table></figure></p>
<h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><p><code>null</code>表示一个“空”的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，而<code>null</code>表示“空”。</p>
<p>在其他语言中，也有类似JavaScript的<code>null</code>的表示，例如Java也用<code>null</code>，Swift用<code>nil</code>，Python用<code>None</code>表示。但是，在JavaScript中，还有一个和<code>null</code>类似的<code>undefined</code>，它表示“未定义”。</p>
<p>JavaScript的设计者希望用<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p>
<p>数组</p>
<p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3.14, &apos;Hello&apos;, null, true];</div></pre></td></tr></table></figure></p>
<p>上述数组包含6个元素。数组用<code>[]</code>表示，元素之间用<code>,</code>分隔。</p>
<p>另一种创建数组的方法是通过<code>Array()</code>函数实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new Array(1, 2, 3); // 创建了数组[1, 2, 3]</div></pre></td></tr></table></figure></p>
<p>然而，出于代码的可读性考虑，强烈建议直接使用<code>[]</code>。</p>
<p>数组的元素可以通过索引来访问。请注意，索引的起始值为0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3.14, &apos;Hello&apos;, null, true];</div><div class="line">arr[0]; // 返回索引为0的元素，即1</div><div class="line">arr[5]; // 返回索引为5的元素，即true</div><div class="line">arr[6]; // 索引超出了范围，返回undefined</div></pre></td></tr></table></figure></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript的对象是一组由<code>键-值</code>组成的无序集合，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line">    name: &apos;Bob&apos;,</div><div class="line">    age: 20,</div><div class="line">    tags: [&apos;js&apos;, &apos;web&apos;, &apos;mobile&apos;],</div><div class="line">    city: &apos;Beijing&apos;,</div><div class="line">    hasCar: true,</div><div class="line">    zipcode: null</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述person对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，<code>person</code>的<code>name</code>属性为<code>&#39;Bob&#39;</code>，<code>zipcode</code>属性为<code>null</code>。</p>
<p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person.name; // &apos;Bob&apos;</div><div class="line">person.zipcode; // null</div></pre></td></tr></table></figure></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量在JavaScript中就是用一个变量名表示，变量名是<code>大小写英文</code>、<code>数字</code>、<code>$</code>和<code>_</code>的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等。申明一个变量用<code>var</code>语句，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a; // 申明了变量a，此时a的值为undefined</div><div class="line">var $b = 1; // 申明了变量$b，同时给$b赋值，此时$b的值为1</div><div class="line">var s_007 = &apos;007&apos;; // s_007是一个字符串</div><div class="line">var Answer = true; // Answer是一个布尔值true</div><div class="line">var t = null; // t的值是null</div></pre></td></tr></table></figure></p>
<p>变量名也可以用中文，但是，请不要给自己找麻烦。</p>
<p>在JavaScript中，使用等号<code>=</code>对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用<code>var</code>申明一次，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a = 123; // a的值是整数123</div><div class="line">a = &apos;ABC&apos;; // a变为字符串</div></pre></td></tr></table></figure></p>
<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int a = 123; // a是整数类型变量，类型用int申明</div><div class="line">a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量</div></pre></td></tr></table></figure></p>
<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var x = 10;</div><div class="line">x = x + 2;</div></pre></td></tr></table></figure></p>
<p>如果从数学上理解<code>x = x + 2</code>那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式<code>x + 2</code>，得到结果<code>12</code>，再赋给变量<code>x</code>。由于<code>x</code>之前的值是<code>10</code>，重新赋值后，<code>x</code>的值变成<code>12</code>。</p>
<h2 id="strict模式"><a href="#strict模式" class="headerlink" title="strict模式"></a>strict模式</h2><p>JavaScript在设计之初，为了方便初学者学习，并不强制要求用<code>var</code>申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = 10; // i现在是全局变量</div></pre></td></tr></table></figure></p>
<p>在同一个页面的不同的JavaScript文件中，如果都不用<code>var</code>申明，恰好都使用了变量<code>i</code>，将造成变量<code>i</code>互相影响，产生难以调试的错误结果。</p>
<p>使用<code>var</code>申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。</p>
<p>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用var申明变量就使用的，将导致运行错误。</p>
<p>启用strict模式的方法是在JavaScript代码的第一行写上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div></pre></td></tr></table></figure></p>
<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>
<p>来测试一下你的浏览器是否能支持strict模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">// 如果浏览器支持strict模式，</div><div class="line">// 下面的代码将报ReferenceError错误:</div><div class="line">abc = &apos;Hello, world&apos;;</div><div class="line">alert(abc);</div></pre></td></tr></table></figure>
<p>运行代码，如果浏览器报错，请修复后再运行。如果浏览器不报错，说明你的浏览器太古老了，需要尽快升级。</p>
<p>不用<code>var</code>申明的变量会被视为全局变量，为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式。我们在后面编写的JavaScript代码将全部采用strict模式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(2)数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-(1)基本语法</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(1)%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门-(1)基本语法/</id>
    <published>2017-09-03T05:43:59.000Z</published>
    <updated>2017-09-13T06:33:58.391Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(1)基本语法</p>
<a id="more"></a>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>JavaScript的语法和Java语言类似，每个语句以<code>;</code>结束，语句块用<code>{...}</code>。但是，JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code>。</p>
<p><em>注意：让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致。在本教程中，我们不会省略<code>;</code>，所有语句都会添加<code>;</code>。</em></p>
<p>例如，下面的一行代码就是一个完整的赋值语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var x = 1;</div></pre></td></tr></table></figure>
<p>下面的一行代码是一个字符串，但仍然可以视为一个完整的语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;Hello, World&apos;;</div></pre></td></tr></table></figure>
<p>下面的一行代码包含两个语句，每个语句用<code>;</code>表示语句结束：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var x = 1; var y = 2; // 不建议一行写多个语句!</div></pre></td></tr></table></figure>
<p>语句块是一组语句的集合，例如，下面的代码先做了一个判断，如果判断成立，将执行<code>{...}</code>中的所有语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (2 &gt; 1) &#123;</div><div class="line">    x = 1;</div><div class="line">    y = 2;</div><div class="line">    z = 3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意花括号<code>{...}</code>内的语句具有缩进，通常是4个空格。缩进不是JavaScript语法要求必须的，但缩进有助于我们理解代码的层次，所以编写代码时要遵守缩进规则。很多文本编辑器具有“自动缩进”的功能，可以帮助整理代码。<br><code>{...}</code>还可以嵌套，形成层级结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (2 &gt; 1) &#123;</div><div class="line">    x = 1;</div><div class="line">    y = 2;</div><div class="line">    z = 3;</div><div class="line">    if (x &lt; y) &#123;</div><div class="line">        z = 4;</div><div class="line">    &#125;</div><div class="line">    if (x &gt; y) &#123;</div><div class="line">        z = 5;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript本身对嵌套的层级没有限制，但是过多的嵌套无疑会大大增加看懂代码的难度。遇到这种情况，需要把部分代码抽出来，作为函数来调用，这样可以减少代码的复杂度。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>以<code>//</code>开头直到行末的字符被视为行注释，注释是给开发人员看到，JavaScript引擎会自动忽略：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 这是一行注释</div><div class="line">alert(&apos;hello&apos;); // 这也是注释</div></pre></td></tr></table></figure>
<p>另一种块注释是用<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* 从这里开始是块注释</div><div class="line">仍然是注释</div><div class="line">仍然是注释</div><div class="line">注释结束 */</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(1)基本语法&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门/</id>
    <published>2017-09-03T04:10:04.000Z</published>
    <updated>2017-09-03T07:52:18.466Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门</p>
<a id="more"></a>
<p>JavaScript代码可以直接嵌在网页的任何地方，不过通常我们都把JavaScript代码放到<code>&lt;head&gt;</code>中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    alert(<span class="string">'Hello, world'</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  ...</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>
<p>第二种方法是把JavaScript代码放到一个单独的.js文件，然后在HTML中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;script src=&quot;/static/js/abc.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  ...</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>这样，<code>/static/js/abc.js</code>就会被浏览器执行。</p>
<p>把JavaScript代码放入一个单独的.js文件中更利于维护代码，并且多个页面可以各自引用同一份.js文件。</p>
<p>可以在同一个页面中引入多个.js文件，还可以在页面中多次编写<code>&lt;script&gt; js代码... &lt;/script&gt;</code>，浏览器按照顺序依次执行。</p>
<p>有些时候你会看到<code>&lt;script&gt;</code>标签还设置了一个type属性：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  ...</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>但这是没有必要的，因为默认的type就是JavaScript，所以不必显式地把type指定为JavaScript。</p>
<h1 id="如何编写JavaScript"><a href="#如何编写JavaScript" class="headerlink" title="如何编写JavaScript"></a>如何编写JavaScript</h1><p>可以用任何文本编辑器来编写JavaScript代码。这里我们推荐以下几种文本编辑器：</p>
<p>Sublime Text</p>
<p>免费，但不注册会不定时弹出提示框。</p>
<p>Notepad++</p>
<p>免费</p>
<p><em>注意：不可以用Word或写字板来编写JavaScript或HTML，因为带格式的文本保存后不是纯文本文件，无法被浏览器正常读取。</em></p>
<h1 id="如何运行JavaScript"><a href="#如何运行JavaScript" class="headerlink" title="如何运行JavaScript"></a>如何运行JavaScript</h1><p>要让浏览器运行JavaScript，必须先有一个HTML页面，在HTML页面中引入JavaScript，然后，让浏览器加载该HTML页面，就可以执行JavaScript代码。</p>
<p>你也许会想，直接在我的硬盘上创建好HTML和JavaScript文件，然后用浏览器打开，不就可以看到效果了吗？</p>
<p>这种方式运行部分JavaScript代码没有问题，但由于浏览器的安全限制，以<code>file://</code>开头的地址无法执行如联网等JavaScript代码，最终，你还是需要架设一个Web服务器，然后以<code>http://</code>开头的地址来正常执行所有JavaScript代码。</p>
<p>不过，开始学习阶段，你无须关心如何搭建开发环境的问题，我们提供在页面输入JavaScript代码并直接运行的功能，让你专注于JavaScript的学习。</p>
<p>试试直接点击“Run”按钮执行下面的JavaScript代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  // 以//开头直到行末的是注释，将被浏览器忽略</div><div class="line">  // 第一个JavaScript代码:</div><div class="line">  &lt;script&gt;</div><div class="line">    alert(<span class="string">'Hello, world'</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  ...</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>浏览器将弹出一个对话框，显示“Hello, world”。你也可以修改两个单引号中间的内容，再试着运行。</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>俗话说得好，“工欲善其事，必先利其器。”，写JavaScript的时候，如果期望显示ABC，结果却显示XYZ，到底代码哪里出了问题？不要抓狂，也不要泄气，作为小白，要坚信：JavaScript本身没有问题，浏览器执行也没有问题，有问题的一定是我的代码。</p>
<p>如何找出问题代码？这就需要调试。</p>
<p>怎么在浏览器中调试JavaScript代码呢？</p>
<p>首先，你需要安装Google Chrome浏览器，Chrome浏览器对开发者非常友好，可以让你方便地调试JavaScript代码。从这里下载<a href="https://www.google.com/chrome/browser/desktop/index.html?system=true&amp;standalone=1" target="_blank" rel="external">Chrome浏览器</a>。 </p>
<p>安装后，随便打开一个网页，然后点击菜单“查看(View)”-“开发者(Developer)”-“开发者工具(Developer Tools)”，浏览器窗口就会一分为二，下方就是开发者工具：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>先点击“控制台(Console)“，在这个面板里可以直接输入JavaScript代码，按回车后执行。</p>
<p>要查看一个变量的内容，在Console中输入<code>console.log(a);</code>，回车后显示的值就是变量的内容。</p>
<p>关闭Console请点击右上角的“×”按钮。请熟练掌握Console的使用方法，在编写JavaScript代码时，经常需要在Console运行测试代码。</p>
<p>如果你对自己还有更高的要求，可以研究开发者工具的“源码(Sources)”，掌握断点、单步执行等高级调试技巧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript简介</title>
    <link href="http://echoingursb.github.io/2017/09/03/JavaScript%E7%AE%80%E4%BB%8B/"/>
    <id>http://echoingursb.github.io/2017/09/03/JavaScript简介/</id>
    <published>2017-09-03T03:46:53.000Z</published>
    <updated>2017-09-03T07:38:29.734Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>JavaScript简介<br><a id="more"></a></p>
<h1 id="JavaScript历史"><a href="#JavaScript历史" class="headerlink" title="JavaScript历史"></a>JavaScript历史</h1><p>要了解JavaScript，我们首先要回顾一下JavaScript的诞生。</p>
<p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>
<p>由于网景公司希望能在静态HTML页面上添加一些动态效果，于是叫<a href="https://baike.baidu.com/item/Brendan%20Eich/561441?fr=aladdin" target="_blank" rel="external">Brendan Eich</a>这哥们在两周之内设计出了JavaScript语言。你没看错，这哥们只用了10天时间。</p>
<p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>
<h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><p>因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为ECMAScript标准。</p>
<p>所以简单说来就是，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p>
<p>那为什么不直接把JavaScript定为标准呢？因为JavaScript是网景的注册商标。</p>
<p>不过大多数时候，我们还是用JavaScript这个词。如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p>
<h1 id="JavaScript版本"><a href="#JavaScript版本" class="headerlink" title="JavaScript版本"></a>JavaScript版本</h1><p>JavaScript语言是在10天时间内设计出来的，虽然语言的设计者水平非常NB，但谁也架不住“时间紧，任务重”，所以，JavaScript有很多设计缺陷，我们后面会慢慢讲到。</p>
<p>此外，由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p>
<p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>
<p>不过，JavaScript的核心语法并没有多大变化。我们的教程会先讲JavaScript最核心的用法，然后，针对ES6讲解新增特性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript简介&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>【进阶版】有道云笔记Markdown指南</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E3%80%90%E8%BF%9B%E9%98%B6%E7%89%88%E3%80%91%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0Markdown%E6%8C%87%E5%8D%97/"/>
    <id>http://echoingursb.github.io/2017/09/03/【进阶版】有道云笔记Markdown指南/</id>
    <published>2017-09-03T03:34:49.000Z</published>
    <updated>2017-09-03T03:35:57.354Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown语法(有道云笔记)" scheme="http://echoingursb.github.io/tags/Markdown%E8%AF%AD%E6%B3%95-%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【简明版】有道云笔记Markdown指南</title>
    <link href="http://echoingursb.github.io/2017/09/01/%E3%80%90%E7%AE%80%E6%98%8E%E7%89%88%E3%80%91%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0Markdown%E6%8C%87%E5%8D%97%20/"/>
    <id>http://echoingursb.github.io/2017/09/01/【简明版】有道云笔记Markdown指南 /</id>
    <published>2017-09-01T02:08:36.000Z</published>
    <updated>2017-09-01T02:49:08.393Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>什么是Markdown？Markdown是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。</p>
<p>有道云笔记内置Markdown编辑器和使用指南，非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>
<p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。</p>
<a id="more"></a>
<h2 id="一-利用Markdown可以做什么？"><a href="#一-利用Markdown可以做什么？" class="headerlink" title="一.利用Markdown可以做什么？"></a>一.利用Markdown可以做什么？</h2><ul>
<li>1.代码高亮</li>
</ul>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>2.制作待办事项To-do List</li>
</ul>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>3.高效绘制流程图、序列图、甘特图、表格</li>
</ul>
<p>流程图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>序列图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>甘特图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>表格：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>4.书写数学公式</li>
</ul>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<h2 id="二-有道云笔记Markdown简明版使用指南"><a href="#二-有道云笔记Markdown简明版使用指南" class="headerlink" title="二.有道云笔记Markdown简明版使用指南"></a>二.有道云笔记Markdown简明版使用指南</h2><ul>
<li>1.标题</li>
</ul>
<p>标题是每篇文章必备而且最常用的格式。</p>
<p>在Markdown中，如果想将一段文字定义为标题，只需要在这段文字前面加上 #，再在 # 后加一个空格即可。还可增加二、三、四、五、六级标题，总共六级，只需要增加 # ，增加一个 # ，标题字号相应降低一级。如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>2.列表</li>
</ul>
<p>列表格式也很常用，它可以让你的文稿变得井井有条。在 Markdown 中，你只需要在文字前面加上 - 就可以了；如果你希望是有序列表，在文字前面加上 1. 2. 3. 即可。</p>
<blockquote>
<p><em>注：-、1.和文字之间要保留一个字符的空格。</em></p>
</blockquote>
<ul>
<li>3.引用</li>
</ul>
<p>如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。</p>
<p>在引用文字前加上 &gt; 并与文字保留一个字符的空格，即可。</p>
<ul>
<li>4.粗体和斜体</li>
</ul>
<p>Markdown 的粗体和斜体也非常简单：</p>
<p>用两个 * 包含一段文本就是体的语法；</p>
<p>用一个 * 包含一段文本就是斜体的语法。</p>
<ul>
<li>5.链接与图片</li>
</ul>
<p>链接：在 Markdown 中，插入链接只需要使用 <a href="链接地址">显示文本</a> 即可。</p>
<p>图片：在 Markdown 中，插入图片只需要使用 <img src="图片链接地址" alt="显示文本">即可。</p>
<p>注：插入图片的语法和链接的语法很像，只是前面多了一个 ！</p>
<ul>
<li>6.分割线</li>
</ul>
<p>分割线的语法只需要另起一行，连续输入三个星号 <em>*</em> 即可分割两段文字内容。</p>
<p>如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>7.表格</li>
</ul>
<p>当你需要在Markdown文稿中键入表格，代码如下：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>示例参考：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<blockquote>
<p><em>如上7大格式是写作文稿时最常使用的</em>。</p>
</blockquote>
<p>怎么样，看了相关Markdown语法是不是觉得挺简单？</p>
<p>当然，Markdown新手在使用不熟练的情况下，可能会忘记相关语法，也没关系，笔记的工具栏内置了Markdown语法，方便学习与熟悉。</p>
<p>如，「表格」语法相对复杂，你可能忘记了，这时候，你只需要点击编辑框上方工具栏，点选「表格」的图标，左边编辑区便会出现「表格」相应代码：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>然后，你只需要将代码替换成相应文本即可，如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>熟悉语法之后，还是建议大家少使用辅助工具栏，尽量自己键入代码，感受纯文本之美。</p>
<p>当然，有道云笔记的Markdown还能支持制作待办事项，书写流程图、序列图、甘特图，书写数学公式等，是不是够极客，够有逼格？</p>
<p>看看笔记菌用Markdown甘特图写的项目计划时间表：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<blockquote>
<p>Tips for 有道云笔记中的 Markdown</p>
</blockquote>
<ul>
<li>1.实时同步预览，所看即所得</li>
</ul>
<p>我们将笔记编辑界面一分为二，左边为编辑区，右边为预览区，两区滚动条同步。在编辑区的操作能够实时反映在预览区，方便及时调整和查看最终版面效果。</p>
<ul>
<li>2.工具栏内置Markdown语法，方便新手学习</li>
</ul>
<p>编辑页面顶端的工具栏有对应代码，如果你是一个不熟悉Markdown语法的新手，可以先尝试用工具栏辅助操作。也可以在网上搜索「Markdown语法指南」进行学习。</p>
<p>当然，如果你觉得工具栏太打扰，点击下方分界条即可隐藏工具栏，切换到极简编辑环境。</p>
<ul>
<li>3.实时云端保存</li>
</ul>
<p>Markdown模式继承了有道云笔记的优良传统，你每一次击键的内容都会实时保存在云端，无需担心浏览器崩溃、设备没电、突然断网等情况。对于写作者来说，更是再也不用担心因为各种原因痛失文稿的情况了。</p>
<ul>
<li>4.界面大小可点击分界条调整。</li>
</ul>
<p>点击“1”处，工具栏收起；</p>
<p>点击“2”处，右侧预览区收起。</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>点击后效果如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<blockquote>
<p>传送门：</p>
<ul>
<li><a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="external">【简明版】有道云笔记Markdown指南</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是Markdown？Markdown是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。&lt;/p&gt;
&lt;p&gt;有道云笔记内置Markdown编辑器和使用指南，非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。&lt;/p&gt;
&lt;p&gt;就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown语法(有道云笔记)" scheme="http://echoingursb.github.io/tags/Markdown%E8%AF%AD%E6%B3%95-%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>单词</title>
    <link href="http://echoingursb.github.io/2017/08/30/%E5%8D%95%E8%AF%8D/"/>
    <id>http://echoingursb.github.io/2017/08/30/单词/</id>
    <published>2017-08-30T01:07:30.000Z</published>
    <updated>2017-09-18T07:13:41.271Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>在这里总结一下遇到的单词，方便自己学习和查阅。<br><a id="more"></a></p>
<ul>
<li>A</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>asynchronous</td>
<td>英 [eɪˈsɪŋkrənəs]   美 [e’sɪŋkrənəs]</td>
<td>adj.异步的</td>
</tr>
<tr>
<td>annotation</td>
<td>英 [ˌænə’teɪʃn]   美 [ˌænə’teɪʃn]</td>
<td>n.注释</td>
</tr>
<tr>
<td>avatar</td>
<td>英 [ˈævətɑ:(r)]   美 [‘ævətɑ:r]</td>
<td>n.阿凡达;化身;头像</td>
</tr>
</tbody>
</table>
<ul>
<li>B</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>BMI</td>
<td></td>
<td>n.Body Mass Index （体质指数）</td>
</tr>
</tbody>
</table>
<ul>
<li>C</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>concatenate</td>
<td>英 [kɒn’kætɪneɪt]   美 [kɑnˈkæt(ə)ˌneɪt]</td>
<td>vt.把 （一系列事件、事情等）联系起来；连接   adj. 连接的，联系在一起的</td>
</tr>
</tbody>
</table>
<ul>
<li>D</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>BMI</td>
<td></td>
<td>n.Body Mass Index （体质指数）</td>
</tr>
</tbody>
</table>
<ul>
<li>I</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>iterator</td>
<td>英 [ɪtə’reɪtə]   美 [ɪtə’reɪtə]</td>
<td>[计] 迭代器，迭代程序</td>
</tr>
<tr>
<td>instantiation</td>
<td>英 [ɪnstænʃɪ’eɪʃən]   美 [ɪnstænʃɪ’eɪʃən]</td>
<td>n.实例化，例示</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里总结一下遇到的单词，方便自己学习和查阅。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="单词" scheme="http://echoingursb.github.io/tags/%E5%8D%95%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>关于小熊</title>
    <link href="http://echoingursb.github.io/2017/08/28/%E5%85%B3%E4%BA%8E%E5%B0%8F%E7%86%8A/"/>
    <id>http://echoingursb.github.io/2017/08/28/关于小熊/</id>
    <published>2017-08-28T05:14:46.000Z</published>
    <updated>2017-09-10T05:44:24.055Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote>
<p>属性面板</p>
</blockquote>
<ul>
<li>专业：电子信息工程</li>
<li>爱好：动漫、编程</li>
</ul>
<blockquote>
<p>职业天赋</p>
</blockquote>
<ul>
<li>写作：</li>
<li>开发：</li>
<li>爬虫：</li>
</ul>
<blockquote>
<p>技能加点</p>
</blockquote>
<ul>
<li>Java：Structs、Hibernate、Spring</li>
<li>Web：HTML5、CSS3、Javascript、Jquery、Vue.js</li>
</ul>
<blockquote>
<p>通关副本</p>
</blockquote>
<ul>
<li><p>1</p>
</li>
<li><p>2</p>
<blockquote>
<p>社交方式</p>
</blockquote>
</li>
<li><p>Github：<a href="https://github.com/Echoingursb" target="_blank" rel="external">Echoingursb</a></p>
</li>
</ul>
<p>我有一头小毛驴，我从来也不骑 (=・ω・=)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  ((`&apos;-&quot;``&quot;&quot;-&apos;`)) </div><div class="line">   )   -    -  ( </div><div class="line">  /   (o _ o)   \ </div><div class="line">  \    ( 0 )    / </div><div class="line">  _&apos;-.._&apos;=&apos;_..-&apos;_ </div><div class="line">/`;#&apos;#&apos;#.-.#&apos;#&apos;#;`\ </div><div class="line">\_))    &apos;#&apos;    ((_/ </div><div class="line">  #.  ☆ ☆ ☆   # </div><div class="line">  &apos;#.         .#&apos;           </div><div class="line">  / &apos;#.      .#&apos; \ </div><div class="line"> _\  \&apos;#. .#&apos;/  /_ </div><div class="line">(((___) &apos;#&apos; (___)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;属性面板&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;专业：电子信息工程&lt;/li&gt;
&lt;li&gt;爱好：动漫、编程&lt;/li&gt;
&lt;/ul&gt;
&lt;bl
    
    </summary>
    
    
  </entry>
  
</feed>
