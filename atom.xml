<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHOAMI</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://echoingursb.github.io/"/>
  <updated>2018-01-06T13:38:11.458Z</updated>
  <id>http://echoingursb.github.io/</id>
  
  <author>
    <name>echo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组的排序</title>
    <link href="http://echoingursb.github.io/2018/01/06/%E6%95%B0%E7%BB%84%E7%9A%84%E6%8E%92%E5%BA%8F/"/>
    <id>http://echoingursb.github.io/2018/01/06/数组的排序/</id>
    <published>2018-01-06T06:33:55.000Z</published>
    <updated>2018-01-06T13:38:11.458Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>数组的排序<br><a id="more"></a></p>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。 选择排序是不稳定的排序方法（比如序列<code>[5， 5， 3]</code>第一次就将第一个<code>[5]</code>与<code>[3]</code>交换，导致第一个<code>5</code>挪动到第二个<code>5</code>后面）。</p>
<table>
<thead>
<tr>
<th>中文名</th>
<th>外文名</th>
<th>性质</th>
<th>代表</th>
<th>适用范围</th>
<th>方法</th>
<th>应用领域</th>
</tr>
</thead>
<tbody>
<tr>
<td>选择排序</td>
<td>Selection sort</td>
<td>不稳定的排序方法</td>
<td>PERL选择排序算法</td>
<td>数据元素</td>
<td>通过比较</td>
<td>计算机，数学</td>
</tr>
</tbody>
</table>
<p>排序算法即解决以下问题的算法：</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><code>n</code>个数的序列<code>&lt;a1,a2,a3,...,an&gt;</code>。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>原序列的一个重排<code>&lt;a1*,a2*,a3*,...,an*&gt;</code>，使得<code>a1*&lt;=a2*&lt;=a3*&lt;=...&lt;=an*</code><br>排序算法有很多，包括插入排序，冒泡排序，堆排序，归并排序，选择排序，计数排序，基数排序，桶排序，快速排序等。插入排序，堆排序，选择排序，归并排序和快速排序，冒泡排序都是比较排序，它们通过对数组中的元素进行比较来实现排序，其他排序算法则是利用非比较的其他方法来获得有关输入数组的排序信息。</p>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p><code>n</code>个记录的文件的直接选择排序可经过<code>n-1</code>趟直接选择排序得到有序结果：</p>
<p>1.初始状态：无序区为<code>R[1..n]</code>，有序区为空。<br>2.第<code>1</code>趟排序</p>
<ul>
<li><p>在无序区<code>R[1..n]</code>中选出关键字最小的记录<code>R[k]</code>，将它与无序区的第<code>1</code>个记录<code>R[1]</code>交换，使<code>R[1..1]</code>和<code>R[2..n]</code>分别变为记录个数增加<code>1</code>个的新有序区和记录个数减少<code>1</code>个的新无序区。</p>
</li>
<li><p>……</p>
</li>
</ul>
<p>3.第<code>i</code>趟排序</p>
<ul>
<li>第<code>i</code>趟排序开始时，当前有序区和无序区分别为<code>R[1..i-1]</code>和<code>R[i..n]</code>。该趟排序从当前无序区中选出关键字最小的记录 <code>R[k]</code>，将它与无序区的第<code>1</code>个记录<code>R[i]</code>交换，使<code>R[1..i]</code>和<code>R[i+1..n]</code>分别变为记录个数增加<code>1</code>个的新有序区和记录个数减少<code>1</code>个的新无序区。</li>
</ul>
<h2 id="通俗的解释"><a href="#通俗的解释" class="headerlink" title="通俗的解释"></a>通俗的解释</h2><p>对比数组中前一个元素跟后一个元素的大小，如果后面的元素比前面的元素小则用一个变量<code>k</code>来记住他的位置，接着第二次比较，前面“后一个元素”现变成了“前一个元素”，继续跟他的“后一个元素”进行比较如果后面的元素比他要小则用变量k记住它在数组中的位置(下标)，等到循环结束的时候，我们应该找到了最小的那个数的下标了，然后进行判断，如果这个元素的下标不是第一个元素的下标，就让第一个元素跟他交换一下值，这样就找到整个数组中最小的数了。然后找到数组中第二小的数，让他跟数组中第二个元素交换一下值，以此类推。</p>
<ol>
<li>时间复杂度</li>
</ol>
<ul>
<li>选择排序的交换操作介于<code>0</code>和<code>(n - 1）</code> 次之间。选择排序的比较操作为<code>n (n - 1） / 2</code> 次之间。选择排序的赋值操作介于<code>0</code> 和 <code>3 (n - 1）</code>次之间。</li>
<li>比较次数<code>O(n^2）</code>，比较次数与关键字的初始状态无关，总的比较次数<code>N=(n-1）+(n-2）+...+1=n*(n-1）/2</code>。交换次数<code>O(n）</code>，最好情况是，已经有序，交换<code>0</code>次；最坏情况交换<code>n-1</code>次，逆序交换<code>n/2</code>次。交换次数比冒泡排序少多了，由于交换所需CPU时间比比较所需的CPU时间多，n值较小时，选择排序比冒泡排序快。</li>
</ul>
<ol>
<li>稳定性</li>
</ol>
<ul>
<li>选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第<code>n-1</code>个元素，第<code>n</code>个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果一个元素比当前元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列<code>5 8 5 2 9</code>，我们知道第一遍选择第<code>1</code>个元素<code>5</code>会和<code>2</code>交换，那么原序列中两个<code>5</code>的相对前后顺序就被破坏了，所以选择排序是一个不稳定的排序算法。</li>
</ul>
<p>Java源代码：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 选择排序(升序)</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] ascendingSelectionSort(<span class="keyword">int</span>[] <span class="keyword">list</span>) &#123;</div><div class="line">	<span class="keyword">int</span> minIndex = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">list</span> == <span class="keyword">null</span>) || (<span class="keyword">list</span>.length == <span class="number">0</span>)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.length; i++) &#123;</div><div class="line">		<span class="comment">// 无序区的最小数据数组下标</span></div><div class="line">		minIndex = i;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">list</span>.length; j++) &#123;</div><div class="line">			<span class="comment">// 在无序区中找到最小数据并保存其数组下标</span></div><div class="line">			<span class="keyword">if</span> (<span class="keyword">list</span>[j] &lt; <span class="keyword">list</span>[minIndex]) &#123;</div><div class="line">				minIndex = j;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (minIndex != i) &#123;</div><div class="line">			<span class="comment">// 如果不是无序区的最小值位置不是默认的第一个数据，则交换之</span></div><div class="line">			temp = <span class="keyword">list</span>[i];</div><div class="line">			<span class="keyword">list</span>[i] = <span class="keyword">list</span>[minIndex];</div><div class="line">			<span class="keyword">list</span>[minIndex] = temp;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 选择排序(降序)</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] decendingSelectionSort(<span class="keyword">int</span>[] <span class="keyword">list</span>) &#123;</div><div class="line">	<span class="keyword">int</span> maxIndex = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">list</span> == <span class="keyword">null</span>) || (<span class="keyword">list</span>.length == <span class="number">0</span>)) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.length; i++) &#123;</div><div class="line">		maxIndex = i;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">list</span>.length; j++) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">list</span>[j] &gt; <span class="keyword">list</span>[maxIndex]) &#123;</div><div class="line">				maxIndex = j;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (maxIndex != i) &#123;</div><div class="line">			temp = <span class="keyword">list</span>[i];</div><div class="line">			<span class="keyword">list</span>[i] = <span class="keyword">list</span>[maxIndex];</div><div class="line">			<span class="keyword">list</span>[maxIndex] = temp;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">list</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组的排序&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="http://echoingursb.github.io/tags/java/"/>
    
      <category term="数组" scheme="http://echoingursb.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数组的查找</title>
    <link href="http://echoingursb.github.io/2018/01/04/%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://echoingursb.github.io/2018/01/04/数组的查找/</id>
    <published>2018-01-04T14:41:12.000Z</published>
    <updated>2018-01-04T15:22:22.341Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>数组的查找<br><a id="more"></a></p>
<h1 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h1><p>线性查找又称顺序查找，是一种最简单的查找方法，它的基本思想是从第一个记录开始，逐个比较记录的关键字，直到和给定的<code>K</code>值相等，则查找成功；若比较结果与文件中<code>n</code>个记录的关键字都不等，则查找失败。</p>
<table>
<thead>
<tr>
<th>中文名</th>
<th>外文名</th>
<th>定义</th>
<th>应用学科</th>
<th>缩写</th>
<th>元    素</th>
</tr>
</thead>
<tbody>
<tr>
<td>线性查找</td>
<td>linear search</td>
<td>又称为顺序查找</td>
<td>计算机技术方法术语</td>
<td>LS</td>
<td>顺序查找</td>
</tr>
</tbody>
</table>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>线性查找又称顺序查找，是一种最简单的查找方法，它的基本思想是从第一个记录开始，逐个比较记录的关键字，直到和给定的K值相等，则查找成功；若比较结果与文件中n个记录的关键字都不等，则查找失败。</p>
<p>查找是对具有相同属性的数据元素（记录）的集合（数据对象）进行的，称之为表或文件，也称字典。对表的查找，若仅对表进行查找操作，而不能改变表中的数据元素，为静态查找；对表除了进行查找操作外，还可能对表进行插入或删除操作，则为动态查找。</p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>例如<code>r[i].key</code>表示数据元素i中的关键字项。在流程图中的循环回路上要进行两次比较，即对数据元素的关键字项比较和对循环次数的判断。为了提高运算速度，可以作如下的改进：</p>
<ul>
<li><p>在原表长<code>n</code>的基础上增加一个元素<code>n+1</code>，将<code>K</code>值送入此元素的关键字项中，这样在循环回路上只要进行一次比较，我们把第<code>n+1</code>个记录称为“监视哨”。这样当<code>n</code>很大时几乎可以节省一半时间。</p>
</li>
<li><p>在顺序查找中，在找到第<code>i</code>个记录时，给定值K和记录中的关键字进行了<code>i</code>次比较。</p>
</li>
<li><p>由于平均查找长度与表长度<code>n</code>成线性关系，因此当<code>n</code>较大时，顺序查找的效率较低。但顺序查找算法比较简单，且对顺序表的存储结构没有限制，既可以用向量作存储结构也可以用链表作存储结构。</p>
</li>
</ul>
<p>Java源代码：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 线性查找法</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> linearSearch(<span class="keyword">int</span>[] <span class="keyword">list</span>, <span class="keyword">int</span> key) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">list</span>.length; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">list</span>[i] == key) &#123;</div><div class="line">			<span class="keyword">return</span> i;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好，占用系统内存较少；其缺点是要求待查表为有序表，且插入删除困难。因此，折半查找方法适用于不经常变动而查找频繁的有序列表。首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p>
<table>
<thead>
<tr>
<th>中文名</th>
<th>外文名</th>
<th>别称</th>
<th>表达式</th>
<th>提出者</th>
<th>提出时间</th>
<th>应用学科</th>
<th>适用领域范围</th>
<th>优    点</th>
<th>缺    点</th>
</tr>
</thead>
<tbody>
<tr>
<td>二分查找</td>
<td>Binary-Search</td>
<td>折半查找</td>
<td>无</td>
<td>John Mauchly</td>
<td>1946</td>
<td>计算机</td>
<td>编程语言</td>
<td>查找速度快</td>
<td>待查表为有序表</td>
</tr>
</tbody>
</table>
<h2 id="算法要求"><a href="#算法要求" class="headerlink" title="算法要求"></a>算法要求</h2><ol>
<li>必须采用顺序存储结构。</li>
<li>必须按关键字大小有序排列。</li>
</ol>
<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>二分查找的基本思想是将<code>n</code>个元素分成大致相等的两部分，取<code>a[n/2]</code>与<code>x</code>做比较，如果<code>x=a[n/2]</code>,则找到<code>x</code>,算法中止；如果<code>x&lt;a[n/2]</code>,则只要在数组<code>a</code>的左半部分继续搜索<code>x</code>,如果<code>x&gt;a[n/2]</code>,则只要在数组<code>a</code>的右半部搜索<code>x</code>.</p>
<p>时间复杂度无非就是while循环的次数！</p>
<p>总共有<code>n</code>个元素，</p>
<p>渐渐跟下去就是<code>n,n/2,n/4,....n/2^k</code>（接下来操作元素的剩余个数），其中<code>k</code>就是循环的次数</p>
<p>由于你<code>n/2^k</code>取整后<code>&gt;=1</code></p>
<p>即令<code>n/2^k=1</code></p>
<p>可得<code>k=log2n</code>,（是以<code>2</code>为底，<code>n</code>的对数）</p>
<p>所以时间复杂度可以表示<code>O(h)=O(log2n)</code></p>
<p>下面提供一段二分查找实现的伪代码:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">BinarySearch(<span class="built_in">max</span>,<span class="built_in">min</span>,des)</div><div class="line"><span class="keyword">mid</span>-&lt;(<span class="built_in">max</span>+<span class="built_in">min</span>)/<span class="number">2</span></div><div class="line"><span class="keyword">while</span>(<span class="built_in">min</span>&lt;=<span class="built_in">max</span>)</div><div class="line"><span class="keyword">mid</span>=(<span class="built_in">min</span>+<span class="built_in">max</span>)/<span class="number">2</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">mid</span>=des <span class="keyword">then</span></div><div class="line"><span class="literal">return</span> <span class="keyword">mid</span></div><div class="line">elseif <span class="keyword">mid</span> &gt;des <span class="keyword">then</span></div><div class="line"><span class="built_in">max</span>=<span class="keyword">mid</span><span class="number">-1</span></div><div class="line"><span class="keyword">else</span></div><div class="line"><span class="built_in">min</span>=<span class="keyword">mid</span>+<span class="number">1</span></div><div class="line"><span class="literal">return</span> <span class="built_in">max</span></div></pre></td></tr></table></figure>
<p>折半查找法也称为二分查找法，它充分利用了元素间的次序关系，采用分治策略，可在最坏的情况下用<code>O(log n)</code>完成搜索任务。它的基本思想是，将<code>n</code>个元素分成个数大致相同的两半，取<code>a[n/2]</code>与欲查找的<code>x</code>作比较，如果<code>x=a[n/2]</code>则找到<code>x</code>，算法终止。如 果<code>x&lt;a[n/2]</code>，则我们只要在数组<code>a</code>的左半部继续搜索<code>x</code>（这里假设数组元素呈升序排列）。如果<code>x&gt;a[n/2]</code>，则我们只要在数组<code>a</code>的右 半部继续搜索<code>x</code>。</p>
<p>Java源代码：<br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 二分查找法</span></div><div class="line"><span class="comment"> * </span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> binarySearch(<span class="keyword">int</span>[] <span class="keyword">list</span>, <span class="keyword">int</span> key) &#123;</div><div class="line">	<span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">	<span class="keyword">int</span> high = <span class="keyword">list</span>.length - <span class="number">1</span>;</div><div class="line"></div><div class="line">	<span class="keyword">while</span> (low &lt;= high) &#123;</div><div class="line">		<span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span> (key == <span class="keyword">list</span>[mid]) &#123;</div><div class="line">			<span class="keyword">return</span> mid;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; <span class="keyword">list</span>[mid]) &#123;</div><div class="line">			high = mid - <span class="number">1</span>;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			low = mid + <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组的查找&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="http://echoingursb.github.io/tags/java/"/>
    
      <category term="数组" scheme="http://echoingursb.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Beautiful Tomorrow</title>
    <link href="http://echoingursb.github.io/2018/01/03/Beautiful-Tomorrow/"/>
    <id>http://echoingursb.github.io/2018/01/03/Beautiful-Tomorrow/</id>
    <published>2018-01-03T07:12:48.000Z</published>
    <updated>2018-01-03T07:45:34.550Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="450" src="//music.163.com/outchain/player?type=0&id=2029428985&auto=0&height=430"></iframe><br><a id="more"></a><br>In the beautiful tomorrow</p>
<p>So much sweeter than today</p>
<p>In the beautiful tomorrow</p>
<p>Well tears will pass away</p>
<p>There’ll be no heartache</p>
<p>And no pain</p>
<p>In the beautiful tomorrow</p>
<p>So much sweeter than today</p>
<p>In the beautiful tomorrow</p>
<p>So much sweeter than today</p>
<p>There’ll be no dark clouds</p>
<p>To block my gaze</p>
<p>There’ll be no tears</p>
<p>Upon my face</p>
<p>In the beautiful tomorrow</p>
<p>So much sweeter tomorrow</p>
<p>In the beautiful tomorrow</p>
<p>So much sweeter than today</p>
<p>In the beautiful tomorrow</p>
<p>Well tears will pass away</p>
<p>There’ll be no dark clouds</p>
<p>To block my gaze</p>
<p>In the beautiful tomorrow</p>
<p>So much sweeter than today</p>
<p>There’ll be no tears</p>
<p>Oh, to block my gaze</p>
<p>In the beautiful tomorrow</p>
<p>So much sweeter than today</p>
<p>Oh, in the beautiful tomorrow</p>
<p>So much sweeter than today</p>
<p>Well tears will pass away</p>
<p>There’ll be no heartache</p>
<p>Or painIn the beautiful tomorrow</p>
<p>So much sweeter than today</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;450&quot; src=&quot;//music.163.com/outchain/player?type=0&amp;id=2029428985&amp;auto=0&amp;height=430&quot;&gt;&lt;/iframe&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>回到地面</title>
    <link href="http://echoingursb.github.io/2017/12/14/%E5%9B%9E%E5%88%B0%E5%9C%B0%E9%9D%A2/"/>
    <id>http://echoingursb.github.io/2017/12/14/回到地面/</id>
    <published>2017-12-13T16:36:27.000Z</published>
    <updated>2017-12-13T17:06:29.467Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/%E5%9B%9E%E5%88%B0%E5%9C%B0%E9%9D%A2/20544-150910150112328.jpg" alt="image"></p>
<h1 id="回到地面"><a href="#回到地面" class="headerlink" title="回到地面"></a>回到地面</h1><p>要是笑过了头</p>
<p>你就会飞到天上去</p>
<p>要想回到地面</p>
<p>你必须做一件伤心的事</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Echoingursb/gallery/master/%E5%9B%9E%E5%88%
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>本地回环地址</title>
    <link href="http://echoingursb.github.io/2017/12/13/%E6%9C%AC%E5%9C%B0%E5%9B%9E%E7%8E%AF%E5%9C%B0%E5%9D%80/"/>
    <id>http://echoingursb.github.io/2017/12/13/本地回环地址/</id>
    <published>2017-12-13T14:53:42.000Z</published>
    <updated>2017-12-13T15:02:41.001Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>本地回环地址</p>
<p>127.0.0.1，通常被称为本地回环地址(Loop back address)，不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。在windows操作系统中也有相似的定义，所以通常在不安装网卡前就可以ping通这个本地回环地址。一般都会用来检查本地网络协议、基本数据接口等是否正常的。<br><a id="more"></a></p>
<ul>
<li>定义</li>
</ul>
<p>本地回环地址，不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。在windows操作系统中也有相似的定义，所以通常在不安装网卡前就可以ping通这个本地回环地址。一般都会用来检查本地网络协议、基本数据接口等是否正常的。</p>
<ul>
<li>解释</li>
</ul>
<p>如果IP地址中的网络号部分指向一个适当的网络，而主机域部分全部为1，那么，通过这样的地址可以向Internet上的任何远程网络发送广播分组（不过，许多网路管理员禁止这种特性）。最后，所有形如127.xx.yy.zz的地址都被保留用作回环测试</p>
<ul>
<li>作用</li>
</ul>
<p>1.测试本机的网络配置</p>
<p>能PING通127.0.0.1说明本机的IP协议安装没有问题。</p>
<p>2.某些SERVER/CLIENT的应用程序在运行时需调用服务器上的资源，一般要指定SERVER的IP地址，但当该程序要在同一台机器上运行而没有别的SERVER时就可以把SERVER的资源装在本机，SERVER的IP地址设为127.0.0.1同样也可以运行。</p>
<ul>
<li>验证案例</li>
</ul>
<p>以socket为例：</p>
<p>监听本地1234端口 socket - tcp-listen:1234</p>
<p>连接本地1234端口 socket - tcp:127.0.0.1:1234</p>
<p>或 socket - tcp:127.255.255.254:1234</p>
<p>以上两种写法都是可以进行通信的。</p>
<p>即： 127.0.0.1 —&gt; 127.255.255.254（去掉0和255） 的范围都是本地回环地址。</p>
<ul>
<li>本地回环与路由</li>
</ul>
<p>1.作为一台路由器的管理地址</p>
<p>系统管理员完成网络规划之后，为了方便管理，会为每一台路由器创建一个loopback接口，并在该接口 上单独指定一个IP 地址作为管理地址，管理员会使用该地址对路由器远程登录(telnet )，该地址实际上起到了类似设备名称一类的功能。</p>
<p>通常每台路由器上存在众多接口和地址，为何不从当中随便挑选一个呢?</p>
<p>原因如下：由于telnet 命令使用TCP 报文，会存在如下情况：路由器的某一个接口由于故障down 掉了，但是其他的接口却仍旧可以telnet ，也就是说，到达这台路由器的TCP 连接依旧存在。所以选择的telnet 地址必须是永远也不会down 掉的，而虚接口恰好满足此类要求。由于此类接口没有与对端互联互通的需求，所以为了节约地址资源，loopback 接口的地址通常指定为32 位掩码。</p>
<p>2.使用该接口地址作为动态路由协议OSPF 、BGP的router id</p>
<p>动态路由协议OSPF 、BGP 在运行过程中需要为该协议指定一个Router id ，作为此路由器的唯一标识，并要求在整个自治系统内唯一。由于router id 是一个32 位的无符号整数，这一点与IP 地址十分相像。而且IP 地址是不会出现重复现象的，所以通常将路由器的router id 指定为与该设备上的某个接口的地址相同。由于loopback 接口的IP 地址通常被视为路由器的标识，所以也就成router id 的最佳选择。</p>
<p>3.使用该接口地址作为BGP 建立TCP 连接的源地址</p>
<p>在BGP 协议中，两个运行BGP 的路由器之间建立邻居关系是通过TCP 建立连接完成的。在配置邻居时通常指定loopback 接口为建立TCP 连接的源地址。</p>
<ul>
<li>IPv6的本地回环</li>
</ul>
<p>IPV6的地址类型可分为三大类：</p>
<p>1、单播地址</p>
<p>2、组播地址</p>
<p>3、任意播地址</p>
<p>回环地址（Loop back address）属于单播地址（Unicast : one to one）</p>
<p>形式：0:0:0:0:0:0:0:1</p>
<p>同IPV4中127.0.0.1地址的含义一样，表示节点自已，也可以是::1，不特定地址写成 “::”，因为它只包含零。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本地回环地址&lt;/p&gt;
&lt;p&gt;127.0.0.1，通常被称为本地回环地址(Loop back address)，不属于任何一个有类别地址类。它代表设备的本地虚拟接口，所以默认被看作是永远不会宕掉的接口。在windows操作系统中也有相似的定义，所以通常在不安装网卡前就可以ping通这个本地回环地址。一般都会用来检查本地网络协议、基本数据接口等是否正常的。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="概念" scheme="http://echoingursb.github.io/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>使用zxing生成解析二维码</title>
    <link href="http://echoingursb.github.io/2017/11/26/%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://echoingursb.github.io/2017/11/26/使用zxing生成解析二维码/</id>
    <published>2017-11-26T08:04:30.000Z</published>
    <updated>2017-11-26T08:35:14.024Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>使用zxing生成解析二维码<br><a id="more"></a></p>
<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>随着移动互联网的发展，我们经常在火车票、汽车票、快餐店、电影院、团购网站以及移动支付等各个场景下见到二维码的应用，可见二维码以经渗透到人们生活的各个方面。条码、二维码以及RFID被人们应用的更普遍一些，二维码相对一维码，具有数据存储量大，保密性好等特点，能够更好地与智能手机等移动终端相结合，形成了更好地互动性和用户体验。而与RFID相比较，二维码不仅成本优势凸显，他的用户体验和互动性也具有更好地应用前景。</p>
<p>作为物联网浪潮产业下的一个环节，二维码的技术应用解决方案层出不穷，二维码已成移动互联网的入口。</p>
<h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2. 基础知识"></a>2. 基础知识</h1><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p><a href="https://baike.baidu.com/item/%E4%BA%8C%E7%BB%B4%E7%A0%81/2385673?fr=aladdin" target="_blank" rel="external">二维码</a>又称QR Code，QR全称Quick Response，是一个近几年来移动设备上超流行的一种编码方式，它比传统的Bar Code条形码能存更多的信息，也能表示更多的数据类型。</p>
<p>二维条码/二维码（2-dimensional bar code）是用某种特定的几何图形按一定规律在平面（二维方向上）分布的黑白相间的图形记录数据符号信息的；在代码编制上巧妙地利用构成计算机内部逻辑基础的“0”、“1”比特流的概念，使用若干个与二进制相对应的几何形体来表示文字数值信息，通过图象输入设备或光电扫描设备自动识读以实现信息自动处理：它具有条码技术的一些共性：每种码制有其特定的字符集；每个字符占有一定的宽度；具有一定的校验功能等。同时还具有对不同行的信息自动识别功能、及处理图形旋转变化点。</p>
<h2 id="QRCode"><a href="#QRCode" class="headerlink" title="QRCode"></a>QRCode</h2><p><a href="https://baike.baidu.com/item/QRCode/10336647?fr=aladdin&amp;fromid=10462339&amp;fromtitle=QR+Code" target="_blank" rel="external">QR Code</a>码，是由Denso公司于1994年9月研制的一种矩阵二维码符号，它具有一维条码及其它二维条码所具有的信息容量大、可靠性高、可表示汉字及图象多种文字信息、保密防伪性强等优点。</p>
<h1 id="3-利用Java生成解析二维码技术实现"><a href="#3-利用Java生成解析二维码技术实现" class="headerlink" title="3. 利用Java生成解析二维码技术实现"></a>3. 利用Java生成解析二维码技术实现</h1><ul>
<li>在github上下载<a href="https://github.com/zxing/zxing" target="_blank" rel="external">zxing</a>，最新版本为3.3.1</li>
</ul>
<p>下载后的文件目录，我们主要需要<code>core</code>和<code>javase</code>目录下的核心代码</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81/eejqmkx0ozg5wx4580o46r.png" alt="image"></p>
<ul>
<li>生成jar包</li>
</ul>
<p>将<code>core</code>和<code>javase</code>文件下的<code>com</code>包在eclipse里导出jar包</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81/z3mrvzkm15uagtk4dza5o8.png" alt="image"></p>
<ul>
<li>创建项目</li>
</ul>
<p>项目目录</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81/j5qltzteyyv9eewof1rbj2.png" alt="image"></p>
<ul>
<li>生成二维码</li>
</ul>
<p><strong>CreateQRCode核心代码</strong><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @author echo</span></div><div class="line"><span class="comment"> */</span></div><div class="line">package com.echo.zxing;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.<span class="built_in">File</span>;</div><div class="line"><span class="keyword">import</span> java.nio.file.Path;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</div><div class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</div><div class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</div><div class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</div><div class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</div><div class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class CreateQRCode &#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		<span class="keyword">int</span> <span class="built_in">width</span> = <span class="number">300</span>;</div><div class="line">		<span class="keyword">int</span> <span class="built_in">height</span> = <span class="number">300</span>;</div><div class="line">		<span class="keyword">String</span> format = <span class="string">"png"</span>;</div><div class="line">		<span class="keyword">String</span> content = <span class="string">"https://echoingursb.github.io/"</span>;</div><div class="line"></div><div class="line">		<span class="comment">// 定义二维码的参数</span></div><div class="line">		HashMap hints = <span class="keyword">new</span> HashMap();</div><div class="line">		hints.<span class="built_in">put</span>(EncodeHintType.CHARACTER_SET, <span class="string">"utf-8"</span>);</div><div class="line">		hints.<span class="built_in">put</span>(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);</div><div class="line">		hints.<span class="built_in">put</span>(EncodeHintType.MARGIN, <span class="number">2</span>);</div><div class="line"></div><div class="line">		<span class="comment">// 生成二维码</span></div><div class="line">		<span class="built_in">try</span> &#123;</div><div class="line">			BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, <span class="built_in">width</span>, <span class="built_in">height</span>, hints);</div><div class="line">			Path file = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"E:/ada/code/img.png"</span>).toPath();</div><div class="line">			MatrixToImageWriter.writeToPath(bitMatrix, format, file);</div><div class="line">		&#125; <span class="built_in">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生成图片结果</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81/24sh3k9yt9tbr3vfgsyav9.png" alt="image"></p>
<ul>
<li>解析二维码</li>
</ul>
<p><strong>ReadQRCode核心代码</strong></p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @author echo</span></div><div class="line"><span class="comment"> */</span></div><div class="line">package com.echo.zxing;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.<span class="built_in">image</span>.BufferedImage;</div><div class="line"><span class="keyword">import</span> java.io.<span class="built_in">File</span>;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.zxing.BinaryBitmap;</div><div class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</div><div class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatReader;</div><div class="line"><span class="keyword">import</span> com.google.zxing.NotFoundException;</div><div class="line"><span class="keyword">import</span> com.google.zxing.Result;</div><div class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.BufferedImageLuminanceSource;</div><div class="line"><span class="keyword">import</span> com.google.zxing.common.HybridBinarizer;</div><div class="line"></div><div class="line"><span class="keyword">public</span> class ReadQRCode &#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</div><div class="line">		MultiFormatReader multiFormatReader = <span class="keyword">new</span> MultiFormatReader();</div><div class="line">		<span class="built_in">File</span> file = <span class="keyword">new</span> <span class="built_in">File</span>(<span class="string">"E:/ada/code/img.png"</span>);</div><div class="line">		BufferedImage <span class="built_in">image</span> = null;</div><div class="line">		<span class="built_in">try</span> &#123;</div><div class="line">			<span class="built_in">image</span> = ImageIO.<span class="built_in">read</span>(file);</div><div class="line">		&#125; <span class="built_in">catch</span> (IOException e1) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e1.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		BinaryBitmap binaryBitmap = <span class="keyword">new</span> BinaryBitmap(<span class="keyword">new</span> HybridBinarizer(<span class="keyword">new</span> BufferedImageLuminanceSource(<span class="built_in">image</span>)));</div><div class="line"></div><div class="line">		<span class="comment">// 定义二维码的参数</span></div><div class="line">		HashMap hints = <span class="keyword">new</span> HashMap();</div><div class="line">		hints.<span class="built_in">put</span>(EncodeHintType.CHARACTER_SET, <span class="string">"utf-8"</span>);</div><div class="line">		<span class="built_in">try</span> &#123;</div><div class="line">			Result result = multiFormatReader.decode(binaryBitmap, hints);</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"解析结果："</span> + result.toString());</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"二维码类型："</span> + result.getBarcodeFormat());</div><div class="line">			System.out.<span class="built_in">println</span>(<span class="string">"二维码文本内容："</span> + result.getText());</div><div class="line">		&#125; <span class="built_in">catch</span> (NotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析图片结果</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/%E4%BD%BF%E7%94%A8zxing%E7%94%9F%E6%88%90%E8%A7%A3%E6%9E%90%E4%BA%8C%E7%BB%B4%E7%A0%81/f16ya5p9g0wv7esomaatid.png" alt="image"></p>
<h1 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h1><ul>
<li><a href="https://github.com/Echoingursb/generate-analysis-qrcode" target="_blank" rel="external">github项目地址</a></li>
<li><a href="http://www.qrcode.com/zh/index.html" target="_blank" rel="external">QR二维码日文官网</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用zxing生成解析二维码&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="http://echoingursb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java算法-求最大公约数和最小公倍数</title>
    <link href="http://echoingursb.github.io/2017/11/21/Java%E7%AE%97%E6%B3%95-%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>http://echoingursb.github.io/2017/11/21/Java算法-求最大公约数和最小公倍数/</id>
    <published>2017-11-21T03:05:34.000Z</published>
    <updated>2017-11-26T08:05:14.282Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Java算法-求最大公约数和最小公倍数<br><a id="more"></a></p>
<h1 id="最大公约数-Greatest-Common-Divisor-GCD"><a href="#最大公约数-Greatest-Common-Divisor-GCD" class="headerlink" title="最大公约数(Greatest Common Divisor(GCD))"></a><a href="https://baike.baidu.com/item/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/869308?fr=aladdin" target="_blank" rel="external">最大公约数(Greatest Common Divisor(GCD))</a></h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>最大公因数，也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。a，b的最大公约数记为（a，b），同样的，a，b，c的最大公约数记为（a，b，c），多个整数的最大公约数也有同样的记号。求最大公约数有多种方法，常见的有质因数分解法、短除法、辗转相除法、更相减损法。与最大公约数相对应的概念是最小公倍数，a，b的最小公倍数记为[a，b]。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p><strong>辗转相除法</strong></p>
<p>辗转相除法：辗转相除法是求两个自然数的最大公约数的一种方法，也叫欧几里德算法。</p>
<p>例如，求（319，377）：</p>
<p>∵ 319÷377=0（余319）</p>
<p>∴（319，377）=（377，319）；</p>
<p>∵ 377÷319=1（余58）</p>
<p>∴（377，319）=（319，58）；</p>
<p>∵ 319÷58=5（余29）</p>
<p>∴ （319，58）=（58，29）；</p>
<p>∵ 58÷29=2（余0）</p>
<p>∴ （58，29）= 29；</p>
<p>∴ （319，377）=29。</p>
<p>可以写成右边的格式。</p>
<p>用辗转相除法求几个数的最大公约数，可以先求出其中任意两个数的最大公约数，再求这个最大公约数与第三个数的最大公约数，依次求下去，直到最后一个数为止。最后所得的那个最大公约数，就是所有这些数的最大公约数。</p>
<h1 id="最小公倍数-Least-Common-Multiple-LCM"><a href="#最小公倍数-Least-Common-Multiple-LCM" class="headerlink" title="最小公倍数(Least Common Multiple(LCM))"></a><a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/6192375?fr=aladdin" target="_blank" rel="external">最小公倍数(Least Common Multiple(LCM))</a></h1><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>两个或多个整数公有的倍数叫做它们的公倍数，其中除0以外最小的一个公倍数就叫做这几个整数的最小公倍数。整数a，b的最小公倍数记为[a，b]，同样的，a，b，c的最小公倍数记为[a，b，c]，多个整数的最小公倍数也有同样的记号。</p>
<p>与最小公倍数相对应的概念是最大公约数，a，b的最大公约数记为（a，b）。关于最小公倍数与最大公约数，我们有这样的定理：(a,b)[a,b]=ab(a,b均为整数)</p>
<h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><p><strong>公式法</strong></p>
<p>由于两个数的乘积等于这两个数的最大公约数与最小公倍数的积。即（a，b）×[a，b]=a×b。所以，求两个数的最小公倍数，就可以先求出它们的最大公约数，然后用上述公式求出它们的最小公倍数。</p>
<p>Java语言实现求最大公约数(GCD)和最小公倍数(LCM)</p>
<ul>
<li>程序一</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.echo;</div><div class="line"></div><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line">public class GreatestCommonDivisorAndLeastCommonMultiple &#123;</div><div class="line">	// 最大公约数</div><div class="line">	static int get_gcd(int n1, int n2) &#123;</div><div class="line">		int gcd = 0;</div><div class="line">		<span class="keyword">if</span> (n1 &lt; n2) &#123;// 交换n1、n2的值</div><div class="line">			n1 = n1 + n2;</div><div class="line">			n2 = n1 - n2;</div><div class="line">			n1 = n1 - n2;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (n1 % n2 == 0) &#123;</div><div class="line">			gcd = n2;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (n1 % n2 &gt; 0) &#123;</div><div class="line">			n1 = n1 % n2;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (n1 &lt; n2) &#123;</div><div class="line">				n1 = n1 + n2;</div><div class="line">				n2 = n1 - n2;</div><div class="line">				n1 = n1 - n2;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (n1 % n2 == 0) &#123;</div><div class="line">				gcd = n2;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">return</span> gcd;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 最小公倍数</div><div class="line">	static int get_lcm(int n1, int n2) &#123;</div><div class="line">		<span class="built_in">return</span> n1 * n2 / get_gcd(n1, n2);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Scanner input = new Scanner(System.in);</div><div class="line">		System.out.print(<span class="string">"请输入第一个整数："</span>);</div><div class="line">		int n1 = input.nextInt();</div><div class="line">		System.out.print(<span class="string">"请输入第二个整数："</span>);</div><div class="line">		int n2 = input.nextInt();</div><div class="line">		System.out.println(<span class="string">"("</span> + n1 + <span class="string">","</span> + n2 + <span class="string">")"</span> + <span class="string">"="</span> + get_gcd(n1, n2));</div><div class="line">		System.out.println(<span class="string">"["</span> + n1 + <span class="string">","</span> + n2 + <span class="string">"]"</span> + <span class="string">"="</span> + get_lcm(n1, n2));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>程序二</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.echo;</div><div class="line"></div><div class="line">import java.util.Scanner;</div><div class="line"></div><div class="line">public class GCDLCM &#123;</div><div class="line">	// 最大公约数</div><div class="line">	private static int get_gcd(int a, int b) &#123;</div><div class="line">		int max, min;</div><div class="line">		max = (a &gt; b) ? a : b;</div><div class="line">		min = (a &lt; b) ? a : b;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (max % min != 0) &#123;</div><div class="line">			<span class="built_in">return</span> get_gcd(min, max % min);</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			<span class="built_in">return</span> min;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 最小公倍数</div><div class="line">	private static int get_lcm(int a, int b) &#123;</div><div class="line">		<span class="built_in">return</span> a * b / get_gcd(a, b);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Scanner input = new Scanner(System.in);</div><div class="line">		int n1 = input.nextInt();</div><div class="line">		int n2 = input.nextInt();</div><div class="line">		System.out.println(<span class="string">"("</span> + n1 + <span class="string">","</span> + n2 + <span class="string">")"</span> + <span class="string">"="</span> + get_gcd(n1, n2));</div><div class="line">		System.out.println(<span class="string">"["</span> + n1 + <span class="string">","</span> + n2 + <span class="string">"]"</span> + <span class="string">"="</span> + get_lcm(n1, n2));</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java算法-求最大公约数和最小公倍数&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="http://echoingursb.github.io/tags/java/"/>
    
      <category term="algroithm" scheme="http://echoingursb.github.io/tags/algroithm/"/>
    
  </entry>
  
  <entry>
    <title>Git使用教程</title>
    <link href="http://echoingursb.github.io/2017/10/29/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://echoingursb.github.io/2017/10/29/Git使用教程/</id>
    <published>2017-10-29T08:54:26.000Z</published>
    <updated>2017-12-20T05:20:49.412Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/avatar/ks4n3vs2yqzwkqgpc4btvj.png" alt="image"></p>
<a id="more"></a>
<h1 id="一：Git介绍"><a href="#一：Git介绍" class="headerlink" title="一：Git介绍"></a>一：Git介绍</h1><p><strong>一：Git是什么？</strong></p>
<p>Git是目前世界上最先进的分布式版本控制系统。</p>
<p><strong>二：SVN与Git的最主要的区别？</strong></p>
<p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p>
<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<p><strong>三：在windows上如何安装Git？</strong></p>
<p>需要从网上下载一个<a href="https://git-scm.com/downloads" target="_blank" rel="external">Git</a>，然后进行默认安装即可。安装完成后，直接点击Git Bash,如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/5n1di0f5197w4fpsf41tgz.png" alt="image"></p>
<p>会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/63nrs23ub6w2sq4qj0tnjs.png" alt="image"></p>
<p>安装完成后，还需要最后一步设置，在命令行输入如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/3zad7itsak98mfil7txdnm.png" alt="image"></p>
<p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</p>
<p>   注意：<code>git config  --global</code> 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。</p>
<p><strong>四：如何操作？</strong></p>
<p> 一：创建版本库。</p>
<p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p>
<p>所以创建一个版本库也非常简单，如下我是E盘 –&gt; ada下 目录下新建一个testgit版本库。</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/8bayni1ziexxyzfva1n54l.png" alt="image"></p>
<p><code>pwd</code>命令是用于显示当前的目录。</p>
<p>1.通过命令 <code>git init</code> 把这个目录变成git可以管理的仓库，如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/vf8orm52pv5oiaax181hxg.png" alt="image"></p>
<p>这时候你当前testgit目录下会多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/9x8h4bcd7y4z7nc8p66a4k.png" alt="image"></p>
<p>2.把文件添加到版本库中。</p>
<p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。</p>
<p><strong>下面先看下demo如下演示：</strong></p>
<p>我在版本库testgit目录下新建一个记事本文件 <code>readme.txt</code> 内容如下：<code>11111111</code></p>
<p>第一步：使用命令 <code>git add readme.txt</code>添加到暂存区里面去。如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/4jk4d5z574ay9f2u48t45e.png" alt="image"></p>
<p>如果和上面一样，没有任何提示，说明已经添加成功了。</p>
<p>第二步：用命令 <code>git commit</code>告诉Git，把文件提交到仓库。</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/h2hh6q9ka18ihzh5l0x1om.png" alt="image"></p>
<p>现在我们已经提交了一个<code>readme.txt</code>文件了，我们下面可以通过命令<code>git status</code>来查看是否还有文件未提交，如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/881xh8upykraadl43397r1.png" alt="image"></p>
<p>说明没有任何文件未提交，但是我现在继续来改下<code>readme.txt</code>内容，比如我在下面添加一行<code>22222222</code>内容，继续使用<code>git status</code>来查看下结果，如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/2y25a361qx16u6rnoff9wc.png" alt="image"></p>
<p>上面的命令告诉我们 <code>readme.txt</code>文件已被修改，但是未被提交的修改。</p>
<p>接下来我想看下<code>readme.txt</code>文件到底改了什么内容，如何查看呢？可以使用如下命令：</p>
<p><code>git diff readme.txt</code>如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/hjy9n1k8n6zwm4ia2r5bvx.png" alt="image"></p>
<p>如上可以看到，<code>readme.txt</code>文件内容从一行<code>11111111</code>改成 二行 添加了一行<code>22222222</code>内容。</p>
<p>知道了对<code>readme.txt</code>文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是<code>git add</code> 第二步是：<code>git commit</code>)。</p>
<p>如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/89zecuqx59p265qd7s801w.png" alt="image"></p>
<h1 id="二：版本回退"><a href="#二：版本回退" class="headerlink" title="二：版本回退"></a>二：版本回退</h1><p>如上，我们已经学会了修改文件，现在我继续对<code>readme.txt</code>文件进行修改，再增加一行</p>
<p>内容为<code>33333333</code>，继续执行命令如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/s4ibcvgdarzz5k76ldi1ay.png" alt="image"></p>
<p>现在我已经对<code>readme.txt</code>文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令<code>git log</code>演示如下所示：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/l58hhkefc13qlbw7j9pb54.png" alt="image"></p>
<p><code>git log</code>命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为<code>33333333</code>.上一次是添加内容<code>22222222</code>，第一次默认是 <code>11111111</code>.如果嫌上面显示的信息太多的话，我们可以使用命令 <code>git log –-pretty=oneline</code>演示如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/pw96r7ehwqcbj6wsz8s386.png" alt="image"></p>
<p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：<code>git reset  --hard HEAD^</code> 那么如果要回退到上上个版本只需把<code>HEAD^</code> 改成 <code>HEAD^^</code>以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：<code>git reset  --hard HEAD~100</code> 即可。未回退之前的<code>readme.txt</code>内容如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/mbu7u9ccetyke0mmmnh76h.png" alt="image"></p>
<p>如果想回退到上一个版本的命令如下操作：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/pup4qh51gn1jq513cdr6fp.png" alt="image"></p>
<p>再来查看下 <code>readme.txt</code>内容如下：通过命令<code>cat readme.txt</code>查看</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/wekuuwff5s39u3jjd246ld.png" alt="image"></p>
<p>可以看到，内容已经回退到上一个版本了。我们可以继续使用<code>git log</code> 来查看下历史记录信息，如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/ruabe039a0yifta6vf1q3x.png" alt="image"></p>
<p>我们看到 增加<code>33333333</code> 内容我们没有看到了，但是现在我想回退到最新的版本，如：有<code>33333333</code>的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：</p>
<p><code>git reset  --hard 版本号</code> ，但是现在的问题假如我已经关掉过一次命令行或者<code>33333333</code>内容的版本号我并不知道呢？要如何知道增加<code>33333333</code>内容的版本号呢？可以通过如下命令即可获取到版本号：<code>git reflog</code>  演示如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/b9so254yb24egbu20pihqj.png" alt="image"></p>
<p>通过上面的显示我们可以知道，增加内容<code>33333333</code>的版本号是 b2e31af.我们现在可以命令</p>
<p><code>git reset  --hard b2e31af</code>来恢复了。演示如下：</p>
<p><img src="https://raw.githubusercontent.com/Echoingursb/gallery/master/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/z03agdel6p2djmdz4uy9tw.png" alt="image"></p>
<p>可以看到 目前已经是最新的版本了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Echoingursb/gallery/master/avatar/ks4n3vs2yqzwkqgpc4btvj.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Git" scheme="http://echoingursb.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>希腊字母常用指代意义及其中文读音</title>
    <link href="http://echoingursb.github.io/2017/10/19/%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A3%E6%84%8F%E4%B9%89%E5%8F%8A%E5%85%B6%E4%B8%AD%E6%96%87%E8%AF%BB%E9%9F%B3/"/>
    <id>http://echoingursb.github.io/2017/10/19/希腊字母常用指代意义及其中文读音/</id>
    <published>2017-10-19T06:44:56.000Z</published>
    <updated>2017-11-25T00:46:14.524Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>希腊字母常用指代意义及其中文读音</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>序号</th>
<th>大写</th>
<th>小写</th>
<th>英语音标注音</th>
<th>英文</th>
<th>汉语名称</th>
<th>常用指代意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Α</td>
<td>α</td>
<td>/‘ælfə/</td>
<td>alpha</td>
<td>阿尔法</td>
<td>角度、系数、角加速度、第一个、电离度、转化率</td>
</tr>
<tr>
<td>2</td>
<td>Β</td>
<td>β</td>
<td>/‘bi:tə/ 或 /‘beɪtə/</td>
<td>beta</td>
<td>贝塔</td>
<td>磁通系数、角度、系数</td>
</tr>
<tr>
<td>3</td>
<td>Γ</td>
<td>γ</td>
<td>/‘gæmə/</td>
<td>gamma</td>
<td>伽玛</td>
<td>电导系数、角度、比热容比</td>
</tr>
<tr>
<td>4</td>
<td>Δ</td>
<td>δ</td>
<td>/‘deltə/</td>
<td>delta</td>
<td>得尔塔</td>
<td>变化量、焓变、熵变、屈光度、一元二次方程中的判别式、化学位移</td>
</tr>
<tr>
<td>5</td>
<td>Ε</td>
<td>ε</td>
<td>/‘epsɪlɒn/</td>
<td>epsilon</td>
<td>艾普西隆</td>
<td>对数之基数、介电常数、电容率</td>
</tr>
<tr>
<td>6</td>
<td>Ζ</td>
<td>ζ</td>
<td>/‘zi:tə/</td>
<td>zeta</td>
<td>泽塔</td>
<td>系数、方位角、阻抗、相对黏度</td>
</tr>
<tr>
<td>7</td>
<td>Η</td>
<td>η</td>
<td>/‘i:tə/</td>
<td>eta</td>
<td>伊塔</td>
<td>迟滞系数、机械效率</td>
</tr>
<tr>
<td>8</td>
<td>Θ</td>
<td>θ</td>
<td>/‘θi:tə/</td>
<td>theta</td>
<td>西塔</td>
<td>温度、角度</td>
</tr>
<tr>
<td>9</td>
<td>Ι</td>
<td>ι</td>
<td>/aɪ’əʊtə/</td>
<td>iota</td>
<td>约(yāo)塔</td>
<td>微小、一点</td>
</tr>
<tr>
<td>10</td>
<td>Κ</td>
<td>κ</td>
<td>/‘kæpə/</td>
<td>kappa</td>
<td>卡帕</td>
<td>介质常数、绝热指数</td>
</tr>
<tr>
<td>11</td>
<td>∧</td>
<td>λ</td>
<td>/‘læmdə/</td>
<td>lambda</td>
<td>拉姆达</td>
<td>波长、体积、导热系数</td>
</tr>
<tr>
<td>12</td>
<td>Μ</td>
<td>μ</td>
<td>/mju:/</td>
<td>mu</td>
<td>谬</td>
<td>磁导率、微、动摩擦系（因）数、流体动力黏度、货币单位,莫比乌斯函数</td>
</tr>
<tr>
<td>13</td>
<td>Ν</td>
<td>ν</td>
<td>/nju:/</td>
<td>nu</td>
<td>纽</td>
<td>磁阻系数、流体运动粘度、光波频率、化学计量数</td>
</tr>
<tr>
<td>14</td>
<td>Ξ</td>
<td>ξ</td>
<td>希腊 /ksi/  英美 /ˈzaɪ/ 或 /ˈsaɪ/</td>
<td>xi</td>
<td>克西</td>
<td>随机变量、（小）区间内的一个未知特定值</td>
</tr>
<tr>
<td>15</td>
<td>Ο</td>
<td>ο</td>
<td>/əuˈmaikrən/或 /ˈɑmɪˌkrɑn/</td>
<td>omicron</td>
<td>奥米克戎</td>
<td>高阶无穷小函数</td>
</tr>
<tr>
<td>16</td>
<td>∏</td>
<td>π</td>
<td>/paɪ/</td>
<td>pi</td>
<td>派</td>
<td>圆周率、π(n)表示不大于n的质数个数、连乘</td>
</tr>
<tr>
<td>17</td>
<td>Ρ</td>
<td>ρ</td>
<td>/rəʊ/</td>
<td>rho</td>
<td>柔</td>
<td>电阻率、柱坐标和极坐标中的极径、密度、曲率半径</td>
</tr>
<tr>
<td>18</td>
<td>∑</td>
<td>σ,ς</td>
<td>/‘sɪɡmə/</td>
<td>sigma</td>
<td>西格马</td>
<td>总和、表面密度、跨导、正应力、电导率</td>
</tr>
<tr>
<td>19</td>
<td>Τ</td>
<td>τ</td>
<td>/tɔ:/ 或 /taʊ/</td>
<td>tau</td>
<td>陶</td>
<td>时间常数、切应力、2π（两倍圆周率）</td>
</tr>
<tr>
<td>20</td>
<td>Υ</td>
<td>υ</td>
<td>/ˈipsɪlon/或 /ˈʌpsɪlɒn/</td>
<td>upsilon</td>
<td>宇普西龙</td>
<td>位移</td>
</tr>
<tr>
<td>21</td>
<td>Φ</td>
<td>φ</td>
<td>/faɪ/</td>
<td>phi</td>
<td>斐</td>
<td>磁通量、电通量、角、透镜焦度、热流量、电势、直径、空集,欧拉函数</td>
</tr>
<tr>
<td>22</td>
<td>Χ</td>
<td>χ</td>
<td>/kaɪ/</td>
<td>chi</td>
<td>希</td>
<td>统计学中有卡方(χ^2)分布</td>
</tr>
<tr>
<td>23</td>
<td>Ψ</td>
<td>ψ</td>
<td>/psaɪ/</td>
<td>psi</td>
<td>普西</td>
<td>角速、介质电通量、ψ函数、磁链</td>
</tr>
<tr>
<td>24</td>
<td>Ω</td>
<td>ω</td>
<td>/‘əʊmɪɡə/或 /oʊ’meɡə/</td>
<td>omega</td>
<td>奥米伽</td>
<td>欧姆、角速度、角频率、交流电的电角度、化学中的质量分数、不饱和度</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;希腊字母常用指代意义及其中文读音&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://echoingursb.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(15)-函数-(3)方法</title>
    <link href="http://echoingursb.github.io/2017/10/14/JavaScript%E6%95%99%E7%A8%8B(15)-%E5%87%BD%E6%95%B0-(3)%E6%96%B9%E6%B3%95/"/>
    <id>http://echoingursb.github.io/2017/10/14/JavaScript教程(15)-函数-(3)方法/</id>
    <published>2017-10-14T08:57:17.000Z</published>
    <updated>2017-11-26T08:20:01.749Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>函数-(3)方法</p>
<a id="more"></a>
<p>在一个对象中绑定函数，称为这个对象的方法。</p>
<p>在JavaScript中，对象的定义是这样的：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var xiaoming</span> = &#123;</div><div class="line">    name: <span class="string">'小明'</span>,</div><div class="line">    birth: 1990</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>但是，如果我们给<code>xiaoming</code>绑定一个函数，就可以做更多的事情。比如，写个<code>age()</code>方法，返回<code>xiaoming</code>的年龄：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span>,</div><div class="line">    birth: <span class="number">1990</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">        <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">xiaoming.age; <span class="comment">// function xiaoming.age()</span></div><div class="line">xiaoming.age(); <span class="comment">// 今年调用是25,明年调用就变成26了</span></div></pre></td></tr></table></figure>
<p>绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个<code>this</code>关键字，这个东东是什么？</p>
<p>在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象，也就是<code>xiaoming</code>这个变量。所以，<code>this.birth</code>可以拿到<code>xiaoming</code>的<code>birth</code>属性。</p>
<p>让我们拆开写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">    <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span>,</div><div class="line">    birth: <span class="number">1990</span>,</div><div class="line">    age: getAge</div><div class="line">&#125;;</div><div class="line">xiaoming.age(); <span class="comment">// 25, 正常结果</span></div><div class="line">getAge(); <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>单独调用函数<code>getAge()</code>怎么返回了<code>NaN</code>？请注意，我们已经进入到了JavaScript的一个大坑里。</p>
<p>JavaScript的函数内部如果调用了<code>this</code>，那么这个<code>this</code>到底指向谁？</p>
<p>答案是，视情况而定！</p>
<p>如果以对象的方法形式调用，比如<code>xiaoming.age()</code>，该函数的<code>this</code>指向被调用的对象，也就是<code>xiaoming</code>，这是符合我们预期的。</p>
<p>如果单独调用函数，比如<code>getAge()</code>，此时，该函数的<code>this</code>指向全局对象，也就是<code>window</code>。</p>
<p>坑爹啊！</p>
<p>更坑爹的是，如果这么写：</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var <span class="function"><span class="keyword">fn</span> = xiaoming.age</span>; <span class="comment">// 先拿到xiaoming的age函数</span></div><div class="line"><span class="function"><span class="keyword">fn</span><span class="params">()</span></span>; <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<p>也是不行的！要保证<code>this</code>指向正确，必须用<code>obj.xxx()</code>的形式调用！</p>
<p>由于这是一个巨大的设计错误，要想纠正可没那么简单。ECMA决定，在strict模式下让函数的<code>this</code>指向<code>undefined</code>，因此，在strict模式下，你会得到一个错误：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span>,</div><div class="line">    birth: <span class="number">1990</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">        <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fn = xiaoming.age;</div><div class="line">fn(); <span class="comment">// Uncaught TypeError: Cannot read property 'birth' of undefined</span></div></pre></td></tr></table></figure>
<p>这个决定只是让错误及时暴露出来，并没有解决<code>this</code>应该指向的正确位置。</p>
<p>有些时候，喜欢重构的你把方法重构了一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span>,</div><div class="line">    birth: <span class="number">1990</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAgeFromBirth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">            <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> getAgeFromBirth();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">xiaoming.age(); <span class="comment">// Uncaught TypeError: Cannot read property 'birth' of undefined</span></div></pre></td></tr></table></figure>
<p>结果又报错了！原因是<code>this</code>指针只在<code>age</code>方法的函数内指向<code>xiaoming</code>，在函数内部定义的函数，<code>this</code>又指向<code>undefined</code>了！（在非strict模式下，它重新指向全局对象<code>window</code>！）</p>
<p>修复的办法也不是没有，我们用一个<code>that</code>变量首先捕获<code>this</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span>,</div><div class="line">    birth: <span class="number">1990</span>,</div><div class="line">    age: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 在方法内部一开始就捕获this</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAgeFromBirth</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">            <span class="keyword">return</span> y - that.birth; <span class="comment">// 用that而不是this</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> getAgeFromBirth();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">xiaoming.age(); <span class="comment">// 25</span></div></pre></td></tr></table></figure>
<p>用<code>var that = this;</code>，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。</p>
<h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h1><p>虽然在一个独立的函数调用中，根据是否是strict模式，<code>this</code>指向<code>undefined</code>或<code>window</code>，不过，我们还是可以控制<code>this</code>的指向的！</p>
<p>要指定函数的<code>this</code>指向哪个对象，可以用函数本身的<code>apply</code>方法，它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p>
<p>用<code>apply</code>修复<code>getAge()</code>调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</div><div class="line">    <span class="keyword">return</span> y - <span class="keyword">this</span>.birth;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span>,</div><div class="line">    birth: <span class="number">1990</span>,</div><div class="line">    age: getAge</div><div class="line">&#125;;</div><div class="line">xiaoming.age(); <span class="comment">// 25</span></div><div class="line">getAge.apply(xiaoming, []); <span class="comment">// 25, this指向xiaoming, 参数为空</span></div></pre></td></tr></table></figure>
<p>另一个与<code>apply()</code>类似的方法是<code>call()</code>，唯一区别是：</p>
<ul>
<li><p><code>apply()</code>把参数打包成<code>Array</code>再传入；</p>
</li>
<li><p><code>call()</code>把参数按顺序传入。</p>
</li>
</ul>
<p>比如调用<code>Math.max(3, 5, 4)</code>，分别用<code>apply()</code>和<code>call()</code>实现如下：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max.apply(null, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]); <span class="comment">// 5</span></div><div class="line">Math.max.call(null, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>对普通函数调用，我们通常把<code>this</code>绑定为<code>null</code>。</p>
<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>利用<code>apply()</code>，我们还可以动态改变函数的行为。</p>
<p>JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p>
<p>现在假定我们想统计一下代码一共调用了多少次<code>parseInt()</code>，可以把所有的调用都找出来，然后手动加上<code>count += 1</code>，不过这样做太傻了。最佳方案是用我们自己的函数替换掉默认的<code>parseInt()</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></div><div class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    count += <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// 测试:</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'20'</span>);</div><div class="line"><span class="built_in">parseInt</span>(<span class="string">'30'</span>);</div><div class="line">count; <span class="comment">// 3</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数-(3)方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(14)-函数-(2)变量作用域</title>
    <link href="http://echoingursb.github.io/2017/10/11/JavaScript%E6%95%99%E7%A8%8B(14)-%E5%87%BD%E6%95%B0-(2)%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://echoingursb.github.io/2017/10/11/JavaScript教程(14)-函数-(2)变量作用域/</id>
    <published>2017-10-11T06:16:57.000Z</published>
    <updated>2017-11-26T08:19:57.610Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>函数-(2)变量作用域<br><a id="more"></a></p>
<p>在JavaScript中，用<code>var</code>申明的变量实际上是有作用域的。</p>
<p>如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">    x = x + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">x = x + <span class="number">2</span>; <span class="comment">// ReferenceError! 无法在函数体外引用变量x</span></div></pre></td></tr></table></figure>
<p>如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">    x = x + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="string">'A'</span>;</div><div class="line">    x = x + <span class="string">'B'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>; <span class="comment">// bar可以访问foo的变量x!</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>; <span class="comment">// ReferenceError! foo不可以访问bar的变量y!</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果内部函数和外部函数的变量名重名怎么办？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> x = <span class="string">'A'</span>;</div><div class="line">        alert(<span class="string">'x in bar() = '</span> + x); <span class="comment">// 'A'</span></div><div class="line">    &#125;</div><div class="line">    alert(<span class="string">'x in foo() = '</span> + x); <span class="comment">// 1</span></div><div class="line">    bar();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这说明JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。</p>
<h1 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h1><p>JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> x = <span class="string">'Hello, '</span> + y;</div><div class="line">    alert(x);</div><div class="line">    <span class="keyword">var</span> y = <span class="string">'Bob'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure>
<p>虽然是strict模式，但语句<code>var x = &#39;Hello, &#39; + y;</code>并不报错，原因是变量<code>y</code>在稍后申明了。但是<code>alert</code>显示<code>Hello, undefined</code>，说明变量<code>y</code>的值为<code>undefined</code>。这正是因为JavaScript引擎自动提升了变量<code>y</code>的声明，但不会提升变量<code>y</code>的赋值。</p>
<p>对于上述<code>foo()</code>函数，JavaScript引擎看到的代码相当于：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> y; <span class="comment">// 提升变量y的申明</span></div><div class="line">    <span class="keyword">var</span> x = <span class="string">'Hello, '</span> + y;</div><div class="line">    alert(x);</div><div class="line">    y = <span class="string">'Bob'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个<code>var</code>申明函数内部用到的所有变量：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span></div><div class="line">        x = <span class="number">1</span>, <span class="comment">// x初始化为1</span></div><div class="line">        y = x + <span class="number">1</span>, <span class="comment">// y初始化为2</span></div><div class="line">        z, i; <span class="comment">// z和i为undefined</span></div><div class="line">    <span class="comment">// 其他语句:</span></div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h1><p>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象<code>window</code>，全局作用域的变量实际上被绑定到<code>window</code>的一个属性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> course = <span class="string">'Learn JavaScript'</span>;</div><div class="line">alert(course); <span class="comment">// 'Learn JavaScript'</span></div><div class="line">alert(<span class="built_in">window</span>.course); <span class="comment">// 'Learn JavaScript'</span></div></pre></td></tr></table></figure>
<p>因此，直接访问全局变量<code>course</code>和访问<code>window.course</code>是完全一样的。</p>
<p>你可能猜到了，由于函数定义有两种方式，以变量方式<code>var foo = function () {}</code>定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到<code>window</code>对象：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'foo'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); <span class="comment">// 直接调用foo()</span></div><div class="line"><span class="built_in">window</span>.foo(); <span class="comment">// 通过window.foo()调用</span></div></pre></td></tr></table></figure>
<p>进一步大胆地猜测，我们每次直接调用的<code>alert()</code>函数其实也是<code>window</code>的一个变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.alert(<span class="string">'调用window.alert()'</span>);</div><div class="line"><span class="comment">// 把alert保存到另一个变量:</span></div><div class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert;</div><div class="line"><span class="comment">// 给alert赋一个新函数:</span></div><div class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">alert(<span class="string">'无法用alert()显示了!'</span>);</div><div class="line"><span class="comment">// 恢复alert:</span></div><div class="line"><span class="built_in">window</span>.alert = old_alert;</div><div class="line">alert(<span class="string">'又可以用alert()了!'</span>);</div></pre></td></tr></table></figure>
<p>这说明JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报<code>ReferenceError</code>错误。</p>
<h1 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h1><p>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p>
<p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 唯一的全局变量MYAPP:</span></div><div class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 其他变量:</span></div><div class="line">MYAPP.name = <span class="string">'myapp'</span>;</div><div class="line">MYAPP.version = <span class="number">1.0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 其他函数:</span></div><div class="line">MYAPP.foo = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'foo'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>把自己的代码全部放入唯一的名字空间<code>MYAPP</code>中，会大大减少全局变量冲突的可能。</p>
<p>许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。</p>
<h1 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h1><p>由于JavaScript的变量作用域实际上是函数内部，我们在<code>for</code>循环等语句块中是无法定义具有局部作用域的变量的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line">    i += <span class="number">100</span>; <span class="comment">// 仍然可以引用变量i</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了解决块级作用域，ES6引入了新的关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明一个块级作用域的变量：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</div><div class="line">        sum += i;</div><div class="line">    &#125;</div><div class="line">    i += <span class="number">1</span>; <span class="comment">// SyntaxError</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>由于<code>var</code>和<code>let</code>申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var PI</span> = 3.14;</div></pre></td></tr></table></figure>
<p>ES6标准引入了新的关键字<code>const</code>来定义常量，<code>const</code>与<code>let</code>都具有块级作用域：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</div><div class="line">PI = <span class="number">3</span>; <span class="comment">// 某些浏览器不报错，但是无效果！</span></div><div class="line">PI; <span class="comment">// 3.14</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数-(2)变量作用域&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(13)-函数-(1)函数定义和调用</title>
    <link href="http://echoingursb.github.io/2017/09/27/JavaScript%E6%95%99%E7%A8%8B(13)-%E5%87%BD%E6%95%B0-(1)%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8/"/>
    <id>http://echoingursb.github.io/2017/09/27/JavaScript教程(13)-函数-(1)函数定义和调用/</id>
    <published>2017-09-27T03:39:25.000Z</published>
    <updated>2017-11-26T08:19:53.283Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>函数-(1)函数定义和调用</p>
<a id="more"></a>
<p>在JavaScript中，定义函数的方式如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span><span class="params">(x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> -x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述<code>abs()</code>函数的定义如下：</p>
<ul>
<li><code>function</code>指出这是一个函数定义；</li>
<li><code>abs</code>是函数的名称；</li>
<li><code>(x)</code>括号内列出函数的参数，多个参数以,分隔；</li>
<li><code>{ ... }</code>之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。</li>
</ul>
<p>请注意，函数体内部的语句在执行时，一旦执行到<code>return</code>时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。</p>
<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>undefined</code>。</p>
<p>由于JavaScript的函数也是一个对象，上述定义的<code>abs()</code>函数实际上是一个函数对象，而函数名<code>abs</code>可以视为指向该函数的变量。</p>
<p>因此，第二种定义函数的方式如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> <span class="params">(x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> -x;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在这种方式下，<code>function (x) { ... }</code>是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量<code>abs</code>，所以，通过变量<code>abs</code>就可以调用该函数。</p>
<p>上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个<code>;</code>，表示赋值语句结束。</p>
<h1 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h1><p>调用函数时，按顺序传入参数即可：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">abs</span>(<span class="number">10</span>); <span class="comment">// 返回10</span></div><div class="line"><span class="built_in">abs</span>(<span class="number">-9</span>); <span class="comment">// 返回9</span></div></pre></td></tr></table></figure>
<p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abs</span>(<span class="number">10</span>, <span class="string">'blablabla'</span>); <span class="comment">// 返回10</span></div><div class="line"><span class="keyword">abs</span>(-<span class="number">9</span>, <span class="string">'haha'</span>, <span class="string">'hehe'</span>, <span class="keyword">null</span>); <span class="comment">// 返回9</span></div></pre></td></tr></table></figure>
<p>传入的参数比定义的少也没有问题：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">abs</span>(); <span class="comment">// 返回NaN</span></div></pre></td></tr></table></figure>
<p>此时<code>abs(x)</code>函数的参数<code>x</code>将收到<code>undefined</code>，计算结果为<code>NaN</code>。</p>
<p>要避免收到<code>undefined</code>，可以对参数进行检查：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span><span class="params">(x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">'number'</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="string">'Not a number'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> -x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h1><p>JavaScript还有一个免费赠送的关键字<code>arguments</code>，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<code>arguments</code>类似<code>Array</code>但它不是一个<code>Array</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    alert(x); <span class="comment">// 10</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">        alert(<span class="built_in">arguments</span>[i]); <span class="comment">// 10, 20, 30</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">foo(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</div></pre></td></tr></table></figure>
<p>利用<code>arguments</code>，你可以获得调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值：</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span><span class="params">()</span> &#123;</span></div><div class="line">    <span class="keyword">if</span> (arguments.<span class="built_in">length</span> === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    var x = arguments[<span class="number">0</span>];</div><div class="line">    <span class="keyword">return</span> x &gt;= <span class="number">0</span> ? x : -x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">abs</span>(); <span class="comment">// 0</span></div><div class="line"><span class="built_in">abs</span>(<span class="number">10</span>); <span class="comment">// 10</span></div><div class="line"><span class="built_in">abs</span>(<span class="number">-9</span>); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<p>实际上<code>arguments</code>最常用于判断传入参数的个数。你可能会看到这样的写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// foo(a[, b], c)</span></div><div class="line"><span class="comment">// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">        <span class="comment">// 实际拿到的参数是a和b，c为undefined</span></div><div class="line">        c = b; <span class="comment">// 把b赋给c</span></div><div class="line">        b = <span class="literal">null</span>; <span class="comment">// b变为默认值</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要把中间的参数<code>b</code>变为“可选”参数，就只能通过<code>arguments</code>判断，然后重新调整参数并赋值。</p>
<h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><p>由于JavaScript函数允许接收任意个参数，于是我们就不得不用<code>arguments</code>来获取所有参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, rest = [];</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; i&lt;<span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">            rest.push(<span class="built_in">arguments</span>[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'a = '</span> + a);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'b = '</span> + b);</div><div class="line">    <span class="built_in">console</span>.log(rest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了获取除了已定义参数<code>a</code>、<code>b</code>之外的参数，我们不得不用<code>arguments</code>，并且循环要从索引<code>2</code>开始以便排除前两个参数，这种写法很别扭，只是为了获得额外的<code>rest</code>参数，有没有更好的方法？</p>
<p>ES6标准引入了<code>rest</code>参数，上面的函数可以改写为：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(a, b, <span class="rest_arg">...rest</span>)</span> </span>&#123;</div><div class="line">    console.log(<span class="string">'a = '</span> + a);</div><div class="line">    console.log(<span class="string">'b = '</span> + b);</div><div class="line">    console.log(rest);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line"><span class="comment">// 结果:</span></div><div class="line"><span class="comment">// a = 1</span></div><div class="line"><span class="comment">// b = 2</span></div><div class="line"><span class="comment">// Array [ 3, 4, 5 ]</span></div><div class="line"></div><div class="line">foo(<span class="number">1</span>);</div><div class="line"><span class="comment">// 结果:</span></div><div class="line"><span class="comment">// a = 1</span></div><div class="line"><span class="comment">// b = undefined</span></div><div class="line"><span class="comment">// Array []</span></div></pre></td></tr></table></figure>
<p><code>rest</code>参数只能写在最后，前面用<code>...</code>标识，从运行结果可知，传入的参数先绑定<code>a</code>、<code>b</code>，多余的参数以数组形式交给变量<code>rest</code>，所以，不再需要<code>arguments</code>我们就获取了全部参数。</p>
<p>如果传入的参数连正常定义的参数都没填满，也不要紧，<code>rest</code>参数会接收一个空数组（注意不是<code>undefined</code>）。</p>
<p>因为<code>rest</code>参数是ES6新标准，所以你需要测试一下浏览器是否支持。请用<code>rest</code>参数编写一个<code>sum()</code>函数，接收任意个参数并返回它们的和：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function <span class="built_in">sum</span>(...<span class="built_in">rest</span>) &#123;</div><div class="line">    <span class="built_in">var</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (value of <span class="built_in">rest</span>) &#123;</div><div class="line">        result += value;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//测试：</div><div class="line"><span class="built_in">var</span> i, <span class="built_in">args</span> = [];</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</div><div class="line">    <span class="built_in">args</span>.<span class="built_in">push</span>(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="built_in">sum</span>() !== <span class="number">0</span>) &#123;</div><div class="line">    console.<span class="built_in">log</span>('测试失败：<span class="built_in">sum</span>()= ' + <span class="built_in">sum</span>());</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sum</span>(<span class="number">1</span>) !== <span class="number">1</span>) &#123;</div><div class="line">    console.<span class="built_in">log</span>('测试失败：<span class="built_in">sum</span>(<span class="number">1</span>)= ' + <span class="built_in">sum</span>(<span class="number">1</span>));</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sum</span>(<span class="number">2</span>, <span class="number">3</span>) !== <span class="number">5</span>) &#123;</div><div class="line">    console.<span class="built_in">log</span>('测试失败：<span class="built_in">sum</span>(<span class="number">2</span>,<span class="number">3</span>)= ' + <span class="built_in">sum</span>(<span class="number">2</span>, <span class="number">3</span>));</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">sum</span>.<span class="built_in">apply</span>(null, <span class="built_in">args</span>) !== <span class="number">5050</span>) &#123;</div><div class="line">    console.<span class="built_in">log</span>('测试失败：<span class="built_in">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,...,<span class="number">100</span>)' + <span class="built_in">sum</span>.<span class="built_in">apply</span>(null, <span class="built_in">args</span>));</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    console.<span class="built_in">log</span>('测试通过！');</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>小心你的return语句</p>
<p>前面我们讲到了JavaScript引擎有一个在行末自动添加分号的机制，这可能让你栽到<code>return</code>语句的一个大坑：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="title">foo</span>() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">&#123;</span> name: <span class="symbol">'foo</span>' &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); // &#123; name: <span class="symbol">'foo</span>' &#125;</div></pre></td></tr></table></figure>
<p>如果把<code>return</code>语句拆成两行：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">        &#123; name: <span class="string">'foo'</span> &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>要小心了，由于JavaScript引擎在行末自动添加分号的机制，上面的代码实际上变成了：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span>; <span class="comment">// 自动添加了分号，相当于return undefined;</span></div><div class="line">        &#123; name: <span class="string">'foo'</span> &#125;; <span class="comment">// 这行语句已经没法执行到了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以正确的多行写法是：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="comment">// 这里不会自动加分号，因为&#123;表示语句尚未结束</span></div><div class="line">        name: <span class="string">'foo'</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>练习</p>
<p>定义一个计算圆面积的函数<code>area_of_circle()</code>，它有两个参数：</p>
<ul>
<li>r: 表示圆的半径；</li>
<li>pi: 表示π的值，如果不传，则默认3.14<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">area_of_circle</span>(<span class="params">r, pi</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="number">3.14</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</div><div class="line">        temp = pi;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> temp * r * r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (area_of_circle(<span class="number">2</span>) == <span class="number">12.56</span> &amp;&amp; area_of_circle(<span class="number">2</span>, <span class="number">3.1416</span>) == <span class="number">12.5664</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'测试通过'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'测试失败'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Max是一个JavaScript新手，他写了一个<code>max()</code>函数，返回两个数中较大的那个：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">                a;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">                b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(max(<span class="number">15</span>, <span class="number">20</span>));</div></pre></td></tr></table></figure></p>
<p>但是Max抱怨他的浏览器出问题了，无论传入什么数，<font color="#FF0000"><code>max()</code></font>函数总是返回<font color="#FF0000"><code>undefined</code></font>。请帮他指出问题并修复。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">alert(max(<span class="number">15</span>, <span class="number">20</span>));</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数-(1)函数定义和调用&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(12)-函数</title>
    <link href="http://echoingursb.github.io/2017/09/15/JavaScript%E6%95%99%E7%A8%8B(12)-%E5%87%BD%E6%95%B0/"/>
    <id>http://echoingursb.github.io/2017/09/15/JavaScript教程(12)-函数/</id>
    <published>2017-09-15T07:14:21.000Z</published>
    <updated>2017-11-26T08:19:46.847Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>函数</p>
<a id="more"></a>
<p>我们知道圆的面积计算公式为：</p>
<p><code>S = πr^2</code></p>
<p>当我们知道半径<code>r</code>的值时，就可以根据公式计算出面积。假设我们需要计算3个不同大小的圆的面积：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">var</span> <span class="built_in">r1</span> = <span class="number">12</span>.<span class="number">34</span><span class="comment">;</span></div><div class="line"><span class="symbol">var</span> <span class="built_in">r2</span> = <span class="number">9</span>.<span class="number">08</span><span class="comment">;</span></div><div class="line"><span class="symbol">var</span> <span class="built_in">r3</span> = <span class="number">73</span>.<span class="number">1</span><span class="comment">;</span></div><div class="line"><span class="symbol">var</span> <span class="built_in">s1</span> = <span class="number">3</span>.<span class="number">14</span> * <span class="built_in">r1</span> * <span class="built_in">r1</span><span class="comment">;</span></div><div class="line"><span class="symbol">var</span> <span class="built_in">s2</span> = <span class="number">3</span>.<span class="number">14</span> * <span class="built_in">r2</span> * <span class="built_in">r2</span><span class="comment">;</span></div><div class="line"><span class="symbol">var</span> <span class="built_in">s3</span> = <span class="number">3</span>.<span class="number">14</span> * <span class="built_in">r3</span> * <span class="built_in">r3</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>当代码出现有规律的重复的时候，你就需要当心了，每次写<code>3.14 * x * x</code>不仅很麻烦，而且，如果要把<code>3.14</code>改成<code>3.14159265359</code>的时候，得全部替换。</p>
<p>有了函数，我们就不再每次写<code>s = 3.14 * x * x</code>，而是写成更有意义的函数调用<code>s = area_of_circle(x)</code>，而函数<code>area_of_circle</code>本身只需要写一次，就可以多次调用。</p>
<p>基本上所有的高级语言都支持函数，JavaScript也不例外。JavaScript的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。</p>
<p>抽象</p>
<p>抽象是数学中非常常见的概念。举个例子：</p>
<p>计算数列的和，比如：<code>1 + 2 + 3 + ... + 100</code>，写起来十分不方便，于是数学家发明了求和符号<code>∑</code>，可以把<code>1 + 2 + 3 + ... + 100</code>记作：</p>
<p>这种抽象记法非常强大，因为我们看到 <code>∑</code>就可以理解成求和，而不是还原成低级的加法运算。</p>
<p>而且，这种抽象记法是可扩展的，比如：</p>
<p>还原成加法运算就变成了：</p>
<p><code>(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)</code></p>
<p>可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。</p>
<p>写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;函数&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(11)-快速入门-(9)iterable</title>
    <link href="http://echoingursb.github.io/2017/09/14/JavaScript%E6%95%99%E7%A8%8B(11)-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(9)iterable/"/>
    <id>http://echoingursb.github.io/2017/09/14/JavaScript教程(11)-快速入门-(9)iterable/</id>
    <published>2017-09-14T05:46:39.000Z</published>
    <updated>2017-11-26T08:19:42.470Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(9)iterable</p>
<a id="more"></a>
<p>遍历<code>Array</code>可以采用下标循环，遍历<code>Map</code>和<code>Set</code>就无法使用下标。为了统一集合类型，ES6标准引入了新的<code>iterable</code>类型，<code>Array</code>、<code>Map</code>和<code>Set</code>都属于<code>iterable</code>类型。</p>
<p>具有<code>iterable</code>类型的集合可以通过新的<code>for ... of</code>循环来遍历。</p>
<p><code>for ... of</code>循环是ES6引入的新的语法，请测试你的浏览器是否支持：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</div><div class="line">&#125;</div><div class="line">alert(<span class="string">'你的浏览器支持for ... of'</span>);</div></pre></td></tr></table></figure>
<p>用<code>for ... of</code>循环遍历集合，用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123; <span class="comment">// 遍历Array</span></div><div class="line">    alert(x); <span class="comment">// A,B,C</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> s) &#123; <span class="comment">// 遍历Set</span></div><div class="line">    alert(x); <span class="comment">// A,B,C</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m) &#123; <span class="comment">// 遍历Map</span></div><div class="line">    alert(x[<span class="number">0</span>] + <span class="string">'='</span> + x[<span class="number">1</span>]); <span class="comment">// 1=x,2=y,3=z</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可能会有疑问，<code>for ... of</code>循环和<code>for ... in</code>循环有何区别？</p>
<p><code>for ... in</code>循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个<code>Array</code>数组实际上也是一个对象，它的每个元素的索引被视为一个属性。</p>
<p>当我们手动给Array对象添加了额外的属性后，for … in循环将带来意想不到的意外效果：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.name = <span class="string">'Hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</div><div class="line">    alert(x); <span class="comment">// 0,1,2,name (遍历的实际上是对象的属性名称)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for ... in</code>循环将把<code>name</code>包括在内，但<code>Array</code>的<code>length</code>属性却不包括在内。</p>
<p><code>for ... of</code>循环则完全修复了这些问题，它只循环集合本身的元素：</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.<span class="keyword">name</span> = <span class="string">'Hello'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) <span class="comment">&#123;</span></div><div class="line"><span class="comment">    alert(x); // A,B,C (循环集合本身的元素)</span></div><div class="line"><span class="comment">&#125;</span></div></pre></td></tr></table></figure>
<p>这就是为什么要引入新的<code>for ... of</code>循环。</p>
<p>然而，更好的方式是直接使用<code>iterable</code>内置的<code>forEach</code>方法，它接收一个函数，每次迭代就自动回调该函数。以<code>Array</code>为例：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(element, index, array)</span> </span>&#123;</div><div class="line">    <span class="comment">// element: 指向当前元素的值 // A,B,C</span></div><div class="line">    <span class="comment">// index: 指向当前索引 // 0,1,2</span></div><div class="line">    <span class="comment">// array: 指向Array对象本身 // A,B,C  A,B,C  A,B,C</span></div><div class="line">    alert(element);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><em>注意</em>，<code>forEach()</code>方法是ES5.1标准引入的，你需要测试浏览器是否支持。</p>
<p><code>Set</code>与<code>Array</code>类似，但<code>Set</code>没有索引，因此回调函数的前两个参数都是元素本身：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="keyword">Set</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]);</div><div class="line">s.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(element, sameElement, <span class="keyword">set</span>)</span> <span class="comment">&#123;</span></span></div><div class="line"><span class="function"><span class="comment">    alert(element); // A,B,C</span></span></div><div class="line"><span class="function"><span class="comment">&#125;</span>);</span></div></pre></td></tr></table></figure>
<p><code>Map</code>的回调函数参数依次为<code>value</code>、<code>key</code>和<code>map</code>本身：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">'x'</span>], [<span class="number">2</span>, <span class="string">'y'</span>], [<span class="number">3</span>, <span class="string">'z'</span>]]);</div><div class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</div><div class="line">    alert(value); <span class="comment">// x,y,z</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果对某些参数不感兴趣，由于JavaScript的函数调用不要求参数必须一致，因此可以忽略它们。例如，只需要获得<code>Array</code>的<code>element</code>：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">a.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span> <span class="params">(element)</span> </span>&#123;</div><div class="line">    alert(element); <span class="comment">// A,B,C</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(9)iterable&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(10)-快速入门-(8)Map和Set</title>
    <link href="http://echoingursb.github.io/2017/09/13/JavaScript%E6%95%99%E7%A8%8B(10)-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(8)Map%E5%92%8CSet/"/>
    <id>http://echoingursb.github.io/2017/09/13/JavaScript教程(10)-快速入门-(8)Map和Set/</id>
    <published>2017-09-13T06:32:44.000Z</published>
    <updated>2017-11-26T08:19:38.542Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(8)Map和Set</p>
<a id="more"></a>
<p>JavaScript的默认对象表示方式<code>{}</code>可以视为其他语言中的<code>Map</code>或<code>Dictionary</code>的数据结构，即一组键值对。</p>
<p>但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p>
<p>为了解决这个问题，最新的ES6规范引入了新的数据类型<code>Map</code>。要测试你的浏览器是否支持ES6规范，请执行以下代码，如果浏览器报ReferenceError错误，那么你需要换一个支持ES6的浏览器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">alert(<span class="string">'你的浏览器支持Map和Set！'</span>);</div></pre></td></tr></table></figure>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><code>Map</code>是一组键值对的结构，具有极快的查找速度。</p>
<p>举个例子，假设要根据同学的名字查找对应的成绩，如果用<code>Array</code>实现，需要两个<code>Array</code>：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var names</span> = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>];</div><div class="line"><span class="attribute">var scores</span> = [95, 75, 85];</div></pre></td></tr></table></figure>
<p>给定一个名字，要查找对应的成绩，就先要在<code>names</code>中找到对应的位置，再从<code>scores</code>取出对应的成绩，<code>Array</code>越长，耗时越长。</p>
<p>如果用<code>Map</code>实现，只需要一个<code>“名字”-“成绩”</code>的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用JavaScript写一个<code>Map</code>如下：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Michael'</span>, <span class="number">95</span>], [<span class="string">'Bob'</span>, <span class="number">75</span>], [<span class="string">'Tracy'</span>, <span class="number">85</span>]]);</div><div class="line">m.<span class="keyword">get</span>(<span class="string">'Michael'</span>); <span class="comment">// 95</span></div></pre></td></tr></table></figure>
<p>初始化<code>Map</code>需要一个二维数组，或者直接初始化一个空<code>Map</code>。<code>Map</code>具有以下方法：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 空Map</span></div><div class="line">m.<span class="keyword">set</span>(<span class="string">'Adam'</span>, <span class="number">67</span>); <span class="comment">// 添加新的key-value</span></div><div class="line">m.<span class="keyword">set</span>(<span class="string">'Bob'</span>, <span class="number">59</span>);</div><div class="line">m.has(<span class="string">'Adam'</span>); <span class="comment">// 是否存在key 'Adam': true</span></div><div class="line">m.<span class="keyword">get</span>(<span class="string">'Adam'</span>); <span class="comment">// 67</span></div><div class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">// 删除key 'Adam'</span></div><div class="line">m.<span class="keyword">get</span>(<span class="string">'Adam'</span>); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>由于一个<code>key</code>只能对应一个<code>value</code>，所以，多次对一个<code>key</code>放入<code>value</code>，后面的值会把前面的值冲掉：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">m.<span class="keyword">set</span>(<span class="string">'Adam'</span>, <span class="number">67</span>);</div><div class="line">m.<span class="keyword">set</span>(<span class="string">'Adam'</span>, <span class="number">88</span>);</div><div class="line">m.<span class="keyword">get</span>(<span class="string">'Adam'</span>); <span class="comment">// 88</span></div></pre></td></tr></table></figure>
<h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1><p><code>Set</code>和<code>Map</code>类似，也是一组<code>key</code>的集合，但不存储<code>value</code>。由于<code>key</code>不能重复，所以，在<code>Set</code>中，没有重复的<code>key</code>。</p>
<p>要创建一个<code>Set</code>，需要提供一个<code>Array</code>作为输入，或者直接创建一个空<code>Set</code>：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 空Set</span></div><div class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 含1, 2, 3</span></div></pre></td></tr></table></figure>
<p>重复元素在<code>Set</code>中自动被过滤：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s = new Set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, '<span class="number">3</span>']);</div><div class="line">s; <span class="comment">// Set &#123;1, 2, 3, "3"&#125;</span></div></pre></td></tr></table></figure>
<p>注意数字<code>3</code>和字符串<code>&#39;3&#39;</code>是不同的元素。</p>
<p>通过<code>add(key)</code>方法可以添加元素到<code>Set</code>中，可以重复添加，但不会有效果：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div><div class="line">&gt;&gt;&gt; s.add(<span class="number">4</span>)</div><div class="line">&gt;&gt;&gt; s</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</div></pre></td></tr></table></figure>
<p>通过<code>delete(key)</code>方法可以删除元素：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var s = new Set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line">s; <span class="comment">// Set &#123;1, 2, 3&#125;</span></div><div class="line">s.delete(<span class="number">3</span>);</div><div class="line">s; <span class="comment">// Set &#123;1, 2&#125;</span></div></pre></td></tr></table></figure>
<p>小结</p>
<p><code>Map</code>和<code>Set</code>是ES6标准新增的数据类型，请根据浏览器的支持情况决定是否要使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(8)Map和Set&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(9)-快速入门-(7)循环</title>
    <link href="http://echoingursb.github.io/2017/09/12/JavaScript%E6%95%99%E7%A8%8B(9)-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(7)%E5%BE%AA%E7%8E%AF/"/>
    <id>http://echoingursb.github.io/2017/09/12/JavaScript教程(9)-快速入门-(7)循环/</id>
    <published>2017-09-12T03:18:03.000Z</published>
    <updated>2017-11-26T08:19:06.163Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(7)循环</p>
<a id="more"></a>
<p>要计算<code>1+2+3</code>，我们可以直接写表达式：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">1 </span>+ <span class="number">2</span> + <span class="number">3</span>; // <span class="number">6</span></div></pre></td></tr></table></figure>
<p>要计算<code>1+2+3+...+10</code>，勉强也能写出来。</p>
<p>但是，要计算<code>1+2+3+...+10000</code>，直接写表达式就不可能了。</p>
<p>为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。</p>
<p>JavaScript的循环有两种，一种是<code>for</code>循环，通过初始条件、结束条件和递增条件来循环执行语句块：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x = <span class="number">0</span><span class="comment">;</span></div><div class="line">var i<span class="comment">;</span></div><div class="line">for (i=<span class="number">1</span><span class="comment">; i&lt;=10000; i++) &#123;</span></div><div class="line">    x = x + i<span class="comment">;</span></div><div class="line">&#125;</div><div class="line">x<span class="comment">; // 50005000</span></div></pre></td></tr></table></figure>
<p>让我们来分析一下for循环的控制条件：</p>
<ul>
<li><code>i=1</code> 这是初始条件，将变量i置为1；</li>
<li><code>i&lt;=10000</code> 这是判断条件，满足时就继续循环，不满足就退出循环；</li>
<li><code>i++</code> 这是每次循环后的递增条件，由于每次循环后变量<code>i</code>都会加<code>1</code>，因此它终将在若干次循环后不满足判断条件<code>i&lt;=10000</code>而退出循环。</li>
</ul>
<p>练习</p>
<p>利用<code>for</code>循环计算<code>1 * 2 * 3 * ... * 10</code>的结果：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="string">'strict'</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</div><div class="line">    x = x * i;</div><div class="line">&#125;</div><div class="line">alert(x);</div><div class="line"><span class="keyword">if</span> (x===<span class="number">3628800</span>) &#123;</div><div class="line">    alert(<span class="string">'1 * 2 * 3 * ... * 10 = '</span>+ x);</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'计算错误'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for</code>循环最常用的地方是利用索引来遍历数组：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'Apple'</span>,<span class="string">'Google'</span>,<span class="string">'Microsoft'</span>];</div><div class="line">var x;</div><div class="line"><span class="keyword">for</span> (var <span class="built_in">i</span> =<span class="number">0</span>;<span class="built_in">i</span>&lt;arr.<span class="built_in">length</span>;<span class="built_in">i</span>++) &#123;</div><div class="line">    x = arr[i];</div><div class="line">    alert(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>for</code>循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用<code>break</code>语句退出循环，否则就是死循环：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (;;) &#123; <span class="comment">// 将无限循环下去</span></div><div class="line">    <span class="keyword">if</span> (x &gt; <span class="number">100</span>) &#123;</div><div class="line">        <span class="keyword">break</span>; <span class="comment">// 通过if判断来退出循环</span></div><div class="line">    &#125;</div><div class="line">    x ++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for … in</p>
<p><code>for</code>循环的一个变体是<code>for ... in</code>循环，它可以把一个对象的所有属性依次循环出来：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    name: <span class="string">'Jack'</span>,</div><div class="line">    age: <span class="number">20</span>,</div><div class="line">    city: <span class="string">'Beijing'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</div><div class="line">    alert(key); <span class="comment">// name, age, city</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要过滤掉对象继承的属性，用<code>hasOwnProperty()</code>来实现：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">    name: <span class="string">'Jack'</span>,</div><div class="line">    age: <span class="number">20</span>,</div><div class="line">    city: <span class="string">'Beijing'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</div><div class="line">    <span class="keyword">if</span> (o.hasOwnProperty(key)) &#123;</div><div class="line">        alert(key); <span class="comment">// name, age, city</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于<code>Array</code>也是对象，而它的每个元素的索引被视为对象的属性，因此，<code>for ... in</code>循环可以直接循环出<code>Array</code>的索引：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a) &#123;</div><div class="line">    alert(i); <span class="comment">// 0,1,2</span></div><div class="line">    alert(arr[i]); <span class="comment">// A,B,C</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>请注意</em>，<code>for ... in</code>对<code>Array</code>的循环得到的是<code>String</code>而不是<code>Number</code>。</p>
<p>while</p>
<p><code>for</code>循环在已知循环的初始和结束条件时非常有用。而上述忽略了条件的<code>for</code>循环容易让人看不清循环的逻辑，此时用<code>while</code>循环更佳。</p>
<p><code>while</code>循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用<code>while</code>循环实现：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.for循环</span></div><div class="line">var x = <span class="number">0</span>;</div><div class="line">for (var i =<span class="number">1</span>;i&lt;=<span class="number">100</span>;i+=<span class="number">2</span>) &#123;</div><div class="line">    x = x + i;</div><div class="line">&#125;</div><div class="line">alert(x); <span class="comment">// 2500</span></div><div class="line"></div><div class="line"><span class="comment">//2.while循环(循环条件自增)</span></div><div class="line">var y = <span class="number">0</span>;</div><div class="line">var m = <span class="number">1</span>;</div><div class="line">while (m&lt;=<span class="number">100</span>) &#123;</div><div class="line">    y = y + m;</div><div class="line">    m += <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">alert(y); <span class="comment">// 2500</span></div><div class="line"></div><div class="line"><span class="comment">//3.whille循环(循环条件自减)</span></div><div class="line">var z =<span class="number">0</span>;</div><div class="line">var n = <span class="number">99</span>;</div><div class="line">while ( n&gt;=<span class="number">0</span>) &#123;</div><div class="line">    z = z + n;</div><div class="line">    n -= <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">alert(z);<span class="comment">// 2500</span></div></pre></td></tr></table></figure>
<p>在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足<code>while</code>条件，循环退出。</p>
<p>do … while</p>
<p>最后一种循环是<code>do { ... } while()</code>循环，它和<code>while</code>循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件：</p>
<figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> <span class="built_in">n</span> = <span class="number">0</span>;</div><div class="line">do &#123;</div><div class="line">    <span class="built_in">n</span> = <span class="built_in">n</span> + <span class="number">1</span>;</div><div class="line">&#125; while (<span class="built_in">n</span> &lt; <span class="number">100</span>);</div><div class="line"><span class="built_in">n</span>; // <span class="number">100</span></div></pre></td></tr></table></figure>
<p>用<code>do { ... } while()</code>循环要小心，循环体会至少执行<code>1</code>次，而<code>for</code>和<code>while</code>循环则可能一次都不执行。</p>
<p>练习</p>
<p>请利用循环遍历数组中的每个名字，并显示<code>Hello, xxx!</code>：</p>
<figure class="highlight matlab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use <span class="string">'strict'</span>;</div><div class="line">var arr = [<span class="string">'Bart'</span>,<span class="string">'Lisa'</span>,<span class="string">'Adam'</span>];</div><div class="line"><span class="keyword">for</span> (var <span class="built_in">i</span>=<span class="number">0</span>;<span class="built_in">i</span>&lt;arr.<span class="built_in">length</span>;<span class="built_in">i</span>++) &#123;</div><div class="line">    alert(<span class="string">'Hello,'</span> + arr[i]+ <span class="string">'!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(7)循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(8)-快速入门-(6)条件判断</title>
    <link href="http://echoingursb.github.io/2017/09/12/JavaScript%E6%95%99%E7%A8%8B(8)-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(6)%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/"/>
    <id>http://echoingursb.github.io/2017/09/12/JavaScript教程(8)-快速入门-(6)条件判断/</id>
    <published>2017-09-12T02:44:12.000Z</published>
    <updated>2017-11-26T08:18:58.213Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(6)条件判断</p>
<a id="more"></a>
<p>JavaScript使用<code>if () { ... } else { ... }</code>来进行条件判断。例如，根据年龄显示不同内容，可以用<code>if</code>语句实现如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var age = <span class="number">20</span>;</div><div class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123; <span class="regexp">//</span> 如果age &gt;= <span class="number">18</span>为<span class="literal">true</span>，则执行<span class="keyword">if</span>语句块</div><div class="line">    alert(<span class="string">'adult'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123; <span class="regexp">//</span> 否则执行<span class="keyword">else</span>语句块</div><div class="line">    alert(<span class="string">'teenager'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>else</code>语句是可选的。如果语句块只包含一条语句，那么可以省略<code>{}</code>：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var age = <span class="number">20</span><span class="comment">;</span></div><div class="line">if (<span class="name">age</span> &gt;= <span class="number">18</span>) </div><div class="line">    alert('adult')<span class="comment">;</span></div><div class="line">else</div><div class="line">    alert('teenager')<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>省略<code>{}</code>的危险之处在于，如果后来想添加一些语句，却忘了写<code>{}</code>，就改变了<code>if...else...</code>的语义，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>)</div><div class="line">    alert(<span class="string">'adult'</span>);</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'age &lt; 18'</span>); <span class="comment">// 添加一行日志</span></div><div class="line">    alert(<span class="string">'teenager'</span>); <span class="comment">// &lt;- 这行语句已经不在else的控制范围了</span></div></pre></td></tr></table></figure>
<p>上述代码的<code>else</code>子句实际上只负责执行<code>console.log(&#39;age &lt; 18&#39;);</code>，原有的<code>alert(&#39;teenager&#39;);</code>已经不属于<code>if...else...</code>的控制范围了，它每次都会执行。</p>
<p>相反地，有<code>{}</code>的语句就不会出错：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</div><div class="line">    alert(<span class="string">'adult'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'age &lt; 18'</span>);</div><div class="line">    alert(<span class="string">'teenager'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是为什么我们建议永远都要写上<code>{}</code>。</p>
<p>多行条件判断</p>
<p>如果还要更细致地判断条件，可以使用多个<code>if...else...</code>的组合：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var age = <span class="number">3</span>;</div><div class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</div><div class="line">    alert(<span class="string">'adult'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">6</span>) &#123;</div><div class="line">    alert(<span class="string">'teenager'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'kid'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是我们通常把<code>else if</code>连写在一起，来增加可读性。这里的<code>else</code>略掉了<code>{}</code>是没有问题的，因为它只包含一个<code>if</code>语句。注意最后一个单独的<code>else</code>不要略掉<code>{}</code>。</p>
<p><em>请注意</em>，<code>if...else...</code>语句的执行特点是二选一，在多个<code>if...else...</code>语句中，如果某个条件成立，则后续就不再继续判断了。</p>
<p>试解释为什么下面的代码显示的是<code>teenager</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line"><span class="keyword">if</span> (age &gt;= <span class="number">6</span>) &#123;</div><div class="line">    alert(<span class="string">'teenager'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</div><div class="line">    alert(<span class="string">'adult'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'kid'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于<code>age</code>的值为<code>20</code>，它实际上同时满足条件<code>age &gt;= 6</code>和<code>age &gt;= 18</code>，这说明条件判断的顺序非常重要。请修复后让其显示<code>adult</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line"><span class="keyword">if</span> (age &gt;= <span class="number">20</span>) &#123;</div><div class="line">    alert(<span class="string">'adult'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</div><div class="line">    alert(<span class="string">'teenager'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'kid'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>if</code>的条件判断语句结果不是<code>true</code>或<code>false</code>怎么办？例如：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'123'</span>;</div><div class="line"><span class="keyword">if</span> (s.length) &#123; <span class="comment">// 条件计算结果为3</span></div><div class="line">    <span class="comment">//</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串<code>&#39;&#39;</code>视为<code>false</code>，其他值一概视为<code>true</code>，因此上述代码条件判断的结果是<code>true</code>。</p>
<p>练习</p>
<p>小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：</p>
<ul>
<li>低于18.5：过轻</li>
<li>18.5-25：正常</li>
<li>25-28：过重</li>
<li>28-32：肥胖</li>
<li>高于32：严重肥胖</li>
</ul>
<p>用<code>if...else...</code>判断并显示结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> weight = <span class="built_in">parseFloat</span>(prompt(<span class="string">'请输入体重(kg)：'</span>));</div><div class="line"><span class="keyword">var</span> height = <span class="built_in">parseFloat</span>(prompt(<span class="string">'请输入身高(m)：'</span>));</div><div class="line"><span class="keyword">var</span> bmi = weight/(height * height);</div><div class="line"><span class="keyword">if</span> (bmi&gt; <span class="number">32</span>) &#123;</div><div class="line">    alert(<span class="string">'严重过胖'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bmi &gt;= <span class="number">28</span>) &#123;</div><div class="line">    alert(<span class="string">'肥胖'</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bmi &gt;= <span class="number">25</span>) &#123;</div><div class="line">    alert(<span class="string">'过重'</span>);</div><div class="line">&#125; esle <span class="keyword">if</span> (bmi &gt;= <span class="number">18.5</span>) &#123;</div><div class="line">    alert(<span class="string">'正常'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">'过轻'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(6)条件判断&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(7)-快速入门-(5)对象</title>
    <link href="http://echoingursb.github.io/2017/09/10/JavaScript%E6%95%99%E7%A8%8B(7)-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(5)%E5%AF%B9%E8%B1%A1/"/>
    <id>http://echoingursb.github.io/2017/09/10/JavaScript教程(7)-快速入门-(5)对象/</id>
    <published>2017-09-10T12:29:41.000Z</published>
    <updated>2017-11-26T08:18:51.835Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(5)对象</p>
<a id="more"></a>
<p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。</p>
<p>JavaScript的对象用于描述现实世界中的某个对象。例如，为了描述“小明”这个淘气的小朋友，我们可以用若干键值对来描述他：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">var</span> <span class="string">xiaoming</span> <span class="string">=</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    name:</span> <span class="string">'小明'</span><span class="string">,</span></div><div class="line"><span class="attr">    birth:</span> <span class="number">1990</span><span class="string">,</span></div><div class="line"><span class="attr">    school:</span> <span class="string">'No.1 Middle School'</span><span class="string">,</span></div><div class="line"><span class="attr">    height:</span> <span class="number">1.70</span><span class="string">,</span></div><div class="line"><span class="attr">    weight:</span> <span class="number">65</span><span class="string">,</span></div><div class="line"><span class="attr">    score:</span> <span class="literal">null</span></div><div class="line"><span class="string">&#125;;</span></div></pre></td></tr></table></figure>
<p>JavaScript用一个<code>{...}</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开。注意，最后一个键值对不需要在末尾加<code>,</code>，如果加了<code>，</code>有的浏览器（如低版本的IE）将报错。</p>
<p>上述对象申明了一个<code>name</code>属性，值是<code>&#39;小明&#39;</code>，<code>birth</code>属性，值是<code>1990</code>，以及其他一些属性。最后，把这个对象赋值给变量<code>xiaoming</code>后，就可以通过变量<code>xiaoming</code>来获取小明的属性了：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xiaoming.name; <span class="regexp">//</span> <span class="string">'小明'</span></div><div class="line">xiaoming.birth; <span class="regexp">//</span> <span class="number">1990</span></div></pre></td></tr></table></figure>
<p>访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用<code>&#39;&#39;</code>括起来：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var xiaohong</span> = &#123;</div><div class="line">    name: <span class="string">'小红'</span>,</div><div class="line">    <span class="string">'middle-school'</span>: <span class="string">'No.1 Middle School'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>xiaohong</code>的属性名<code>middle-school</code>不是一个有效的变量，就需要用<code>&#39;&#39;</code>括起来。访问这个属性也无法使用<code>.</code>操作符，必须用<code>[&#39;xxx&#39;]</code>来访问：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xiaohong[<span class="string">'middle-school'</span>]; <span class="regexp">//</span> <span class="string">'No.1 Middle School'</span></div><div class="line">xiaohong[<span class="string">'name'</span>]; <span class="regexp">//</span> <span class="string">'小红'</span></div><div class="line">xiaohong.name; <span class="regexp">//</span> <span class="string">'小红'</span></div></pre></td></tr></table></figure>
<p>也可以用<code>xiaohong[&#39;name&#39;]</code>来访问<code>xiaohong</code>的<code>name</code>属性，不过<code>xiaohong.name</code>的写法更简洁。我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过<code>object.prop</code>的形式访问一个属性了。</p>
<p>实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p>
<p>如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回<code>undefined</code>：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span></div><div class="line">&#125;;</div><div class="line">xiaoming.age; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xiaoming = &#123;</div><div class="line">    name: <span class="string">'小明'</span></div><div class="line">&#125;;</div><div class="line">xiaoming.age; <span class="comment">// undefined</span></div><div class="line">xiaoming.age = <span class="number">18</span>; <span class="comment">// 新增一个age属性</span></div><div class="line">xiaoming.age; <span class="comment">// 18</span></div><div class="line"><span class="keyword">delete</span> xiaoming.age; <span class="comment">// 删除age属性</span></div><div class="line">xiaoming.age; <span class="comment">// undefined</span></div><div class="line"><span class="keyword">delete</span> xiaoming[<span class="string">'name'</span>]; <span class="comment">// 删除name属性</span></div><div class="line">xiaoming.name; <span class="comment">// undefined</span></div><div class="line"><span class="keyword">delete</span> xiaoming.school; <span class="comment">// 删除一个不存在的school属性也不会报错</span></div></pre></td></tr></table></figure>
<p>如果我们要检测<code>xiaoming</code>是否拥有某一属性，可以用<code>in</code>操作符：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">var</span> <span class="string">xiaoming</span> <span class="string">=</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">    name:</span> <span class="string">'小明'</span><span class="string">,</span></div><div class="line"><span class="attr">    birth:</span> <span class="number">1990</span><span class="string">,</span></div><div class="line"><span class="attr">    school:</span> <span class="string">'No.1 Middle School'</span><span class="string">,</span></div><div class="line"><span class="attr">    height:</span> <span class="number">1.70</span><span class="string">,</span></div><div class="line"><span class="attr">    weight:</span> <span class="number">65</span><span class="string">,</span></div><div class="line"><span class="attr">    score:</span> <span class="literal">null</span></div><div class="line"><span class="string">&#125;;</span></div><div class="line"><span class="string">'name'</span> <span class="string">in</span> <span class="string">xiaoming;</span> <span class="string">//</span> <span class="literal">true</span></div><div class="line"><span class="string">'grade'</span> <span class="string">in</span> <span class="string">xiaoming;</span> <span class="string">//</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>不过要小心，如果<code>in</code>判断一个属性存在，这个属性不一定是<code>xiaoming</code>的，它可能是<code>xiaoming</code>继承得到的：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'toString'</span> <span class="keyword">in</span> xiaoming; <span class="regexp">//</span> <span class="keyword">true</span></div></pre></td></tr></table></figure>
<p>因为<code>toString</code>定义在<code>object</code>对象中，而所有对象最终都会在原型链上指向<code>object</code>，所以<code>xiaoming</code>也拥有<code>toString</code>属性。</p>
<p>要判断一个属性是否是<code>xiaoming</code>自身拥有的，而不是继承得到的，可以用<code>hasOwnProperty()</code>方法：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var xiaoming = &#123;</div><div class="line">    <span class="symbol">name:</span> <span class="string">'小明'</span></div><div class="line">&#125;;</div><div class="line">xiaoming.hasOwnProperty(<span class="string">'name'</span>); <span class="regexp">//</span> <span class="keyword">true</span></div><div class="line">xiaoming.hasOwnProperty(<span class="string">'toString'</span>); <span class="regexp">//</span> <span class="keyword">false</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(5)对象&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(6)-快速入门-(4)数组</title>
    <link href="http://echoingursb.github.io/2017/09/03/JavaScript%E6%95%99%E7%A8%8B(6)-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(4)%E6%95%B0%E7%BB%84/"/>
    <id>http://echoingursb.github.io/2017/09/03/JavaScript教程(6)-快速入门-(4)数组/</id>
    <published>2017-09-03T09:55:32.000Z</published>
    <updated>2017-11-26T08:18:46.047Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(4)数组</p>
<a id="more"></a>
<p>JavaScript的<code>Array</code>可以包含任意数据类型，并通过索引来访问每个元素。</p>
<p>要取得<code>Array</code>的长度，直接访问<code>length</code>属性：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">'Hello'</span>, <span class="literal">null</span>, <span class="literal">true</span>];</div><div class="line">arr.length; <span class="comment">// 6</span></div></pre></td></tr></table></figure>
<p>请注意，直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.length; <span class="comment">// 3</span></div><div class="line">arr.length = <span class="number">6</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span></div><div class="line">arr.length = <span class="number">2</span>;</div><div class="line">arr; <span class="comment">// arr变为[1, 2]</span></div></pre></td></tr></table></figure>
<p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr[<span class="number">1</span>] = <span class="number">99</span>;</div><div class="line">arr; // arr现在变为[<span class="string">'A'</span>, <span class="number">99</span>, <span class="string">'C'</span>]</div></pre></td></tr></table></figure>
<p>请注意，如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr[<span class="number">5</span>] = 'x';</div><div class="line">arr; <span class="comment">// arr变为[1, 2, 3, undefined, undefined, 'x']</span></div></pre></td></tr></table></figure>
<p>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的<code>Array</code>却不会有任何错误。在编写代码时，不建议直接修改<code>Array</code>的大小，访问索引时要确保索引不会越界。</p>
<h1 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h1><p>与<code>String</code>类似，<code>Array</code>也可以通过<code>indexOf()</code>来搜索一个指定的元素的位置：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">10</span>, <span class="number">20</span>, '<span class="number">30</span>', 'xyz'];</div><div class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">// 元素10的索引为0</span></div><div class="line">arr.indexOf(<span class="number">20</span>); <span class="comment">// 元素20的索引为1</span></div><div class="line">arr.indexOf(<span class="number">30</span>); <span class="comment">// 元素30没有找到，返回-1</span></div><div class="line">arr.indexOf('<span class="number">30</span>'); <span class="comment">// 元素'30'的索引为2</span></div></pre></td></tr></table></figure>
<p>注意了，数字<code>30</code>和字符串<code>&#39;30&#39;</code>是不同的元素。</p>
<h1 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h1><p><code>slice()</code>就是对应<code>String</code>的<code>substring()</code>版本，它截取<code>Array</code>的部分元素，然后返回一个新的<code>Array</code>：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</div><div class="line">arr.slice(<span class="number">0</span>, <span class="number">3</span>); // 从索引<span class="number">0</span>开始，到索引<span class="number">3</span>结束，但不包括索引<span class="number">3</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</div><div class="line">arr.slice(<span class="number">3</span>); // 从索引<span class="number">3</span>开始到结束: [<span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>]</div></pre></td></tr></table></figure></p>
<p>注意到<code>slice()</code>的起止参数包括开始索引，不包括结束索引。</p>
<p>如果不给<code>slice()</code>传递任何参数，它就会从头到尾截取所有元素。利用这一点，我们可以很容易地复制一个<code>Array</code>：<br><figure class="highlight cal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>];</div><div class="line"><span class="keyword">var</span> aCopy = arr.slice();</div><div class="line">aCopy; // [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>]</div><div class="line">aCopy === arr; // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h1 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h1><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line">arr.<span class="keyword">push</span>(<span class="string">'A'</span>, <span class="string">'B'</span>); <span class="comment">// 返回Array新的长度: 4</span></div><div class="line">arr; <span class="comment">// [1, 2, 'A', 'B']</span></div><div class="line">arr.<span class="keyword">pop</span>(); <span class="comment">// pop()返回'B'</span></div><div class="line">arr; <span class="comment">// [1, 2, 'A']</span></div><div class="line">arr.<span class="keyword">pop</span>(); arr.<span class="keyword">pop</span>(); arr.<span class="keyword">pop</span>(); <span class="comment">// 连续pop 3次</span></div><div class="line">arr; <span class="comment">// []</span></div><div class="line">arr.<span class="keyword">pop</span>(); <span class="comment">// 空数组继续pop不会报错，而是返回undefined</span></div><div class="line">arr; <span class="comment">// []</span></div></pre></td></tr></table></figure></p>
<h1 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h1><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line">arr.unshift(<span class="string">'A'</span>, <span class="string">'B'</span>); <span class="regexp">//</span> 返回Array新的长度: <span class="number">4</span></div><div class="line">arr; <span class="regexp">//</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line">arr.shift(); <span class="regexp">//</span> <span class="string">'A'</span></div><div class="line">arr; <span class="regexp">//</span> [<span class="string">'B'</span>, <span class="number">1</span>, <span class="number">2</span>]</div><div class="line">arr.shift(); arr.shift(); arr.shift(); <span class="regexp">//</span> 连续shift <span class="number">3</span>次</div><div class="line">arr; <span class="regexp">//</span> []</div><div class="line">arr.shift(); <span class="regexp">//</span> 空数组继续shift不会报错，而是返回undefined</div><div class="line">arr; <span class="regexp">//</span> []</div></pre></td></tr></table></figure></p>
<h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>];</div><div class="line">arr.sort();</div><div class="line">arr; // [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</div></pre></td></tr></table></figure>
<p>能否按照我们自己指定的顺序排序呢？完全可以，我们将在后面的函数中讲到。</p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><p><code>reverse()</code>把整个<code>Array</code>的元素给掉个个，也就是反转：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</div><div class="line">arr.reverse(); </div><div class="line">arr; // [<span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>]</div></pre></td></tr></table></figure></p>
<h1 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h1><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</div><div class="line"><span class="regexp">//</span> 从索引<span class="number">2</span>开始删除<span class="number">3</span>个元素,然后再添加两个元素:</div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="regexp">//</span> 返回删除的元素 [<span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>]</div><div class="line">arr; <span class="regexp">//</span> [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Oracle'</span>]</div><div class="line"><span class="regexp">//</span> 只删除,不添加:</div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="regexp">//</span> [<span class="string">'Google'</span>, <span class="string">'Facebook'</span>]</div><div class="line">arr; <span class="regexp">//</span> [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Oracle'</span>]</div><div class="line"><span class="regexp">//</span> 只添加,不删除:</div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="regexp">//</span> 返回[],因为没有删除任何元素</div><div class="line">arr; <span class="regexp">//</span> [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>, <span class="string">'Oracle'</span>]</div></pre></td></tr></table></figure></p>
<h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h1><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">var added = arr.concat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line">added; // [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">arr; // [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</div></pre></td></tr></table></figure></p>
<p>请注意，<code>concat()</code>方法并没有修改当前<code>Array</code>，而是返回了一个新的<code>Array</code>。</p>
<p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</div><div class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]); // [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<h1 id="join"><a href="#join" class="headerlink" title="join"></a>join</h1><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.<span class="keyword">join</span>(<span class="string">'-'</span>); <span class="comment">// 'A-B-C-1-2-3'</span></div></pre></td></tr></table></figure>
<p>如果<code>Array</code>的元素不是字符串，将自动转换为字符串后再连接。</p>
<h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>如果数组的某个元素又是一个<code>Array</code>，则可以形成多维数组，例如：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], '-'];</div></pre></td></tr></table></figure>
<p>上述<code>Array</code>包含3个元素，其中头两个元素本身也是<code>Array</code>。</p>
<p>练习：如何通过索引取到500这个值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], <span class="string">'-'</span>];</div><div class="line"><span class="keyword">var</span> x = ??;</div><div class="line">alert(x); <span class="comment">// x应该为500</span></div></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Array提供了一种顺序存储一组元素的功能，并可以按索引来读写。</p>
<p>练习：在新生欢迎会上，你已经拿到了新同学的名单，请排序后显示：欢迎XXX，XXX，XXX和XXX同学！：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'小明'</span>, <span class="string">'小红'</span>, <span class="string">'大军'</span>, <span class="string">'阿黄'</span>];</div><div class="line">alert(<span class="string">'???'</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(4)数组&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript教程(5)-快速入门-(3)字符串</title>
    <link href="http://echoingursb.github.io/2017/09/03/JavaScript%E6%95%99%E7%A8%8B(5)-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-(3)%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://echoingursb.github.io/2017/09/03/JavaScript教程(5)-快速入门-(3)字符串/</id>
    <published>2017-09-03T08:43:39.000Z</published>
    <updated>2017-11-26T08:18:39.516Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>快速入门-(3)字符串</p>
<a id="more"></a>
<p>JavaScript的字符串就是用<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起来的字符表示。</p>
<p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，<code>空格</code>，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">'I</span>\<span class="symbol">'m</span> \<span class="string">"OK\"</span>!';</div></pre></td></tr></table></figure></p>
<p>表示的字符串内容是：<code>I&#39;m &quot;OK&quot;!</code></p>
<p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>。</p>
<p>ASCII字符可以以<code>\x##</code>形式的十六进制表示，例如：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">'\x41'; <span class="comment">// 完全等同于 'A'</span></div></pre></td></tr></table></figure></p>
<p>还可以用<code>\u####</code>表示一个Unicode字符：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">'\u4e2d\u<span class="number">6587</span>'; <span class="comment">// 完全等同于 '中文'</span></div></pre></td></tr></table></figure></p>
<h1 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h1><p>由于多行字符串用<code>\n</code>写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号表示：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//`...`</div><div class="line">`这是一个</div><div class="line">多行</div><div class="line">字符串`;</div></pre></td></tr></table></figure>
<p><em>注意：反引号在键盘的ESC下方，数字键1的左边：</em></p>
<p>练习：测试你的浏览器是否支持ES6标准，如果不支持，请把多行字符串用<code>\n</code>重新表示出来：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果浏览器不支持ES6，将报SyntaxError错误:</span></div><div class="line">alert(`多行</div><div class="line">字符串</div><div class="line">测试`);</div></pre></td></tr></table></figure>
<h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><p>要把多个字符串连接起来，可以用<code>+</code>号连接：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'小明'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> <span class="keyword">message</span> = <span class="string">'你好, '</span> + <span class="keyword">name</span> + <span class="string">', 你今年'</span> + age + <span class="string">'岁了!'</span>;</div><div class="line">alert(<span class="keyword">message</span>);</div></pre></td></tr></table></figure></p>
<p>如果有很多变量需要连接，用<code>+</code>号就比较麻烦。ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'小明'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line"><span class="keyword">var</span> <span class="keyword">message</span> = `你好, $<span class="comment">&#123;name&#125;</span>, 你今年$<span class="comment">&#123;age&#125;</span>岁了!`;</div><div class="line">alert(<span class="keyword">message</span>);</div></pre></td></tr></table></figure></p>
<p>练习：测试你的浏览器是否支持ES6模板字符串，如果不支持，请把模板字符串改为<code>+</code>连接的普通字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果浏览器支持模板字符串，将会替换字符串内部的变量:</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'小明'</span>;</div><div class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</div><div class="line">alert(<span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>);</div></pre></td></tr></table></figure>
<h1 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a>操作字符串</h1><p>字符串常见的操作如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Hello, world!'</span>;</div><div class="line">s.length; <span class="comment">// 13</span></div></pre></td></tr></table></figure></p>
<p>要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var s = <span class="string">'Hello, world!'</span>;</div><div class="line"></div><div class="line">s[<span class="number">0</span>]; <span class="regexp">//</span> <span class="string">'H'</span></div><div class="line">s[<span class="number">6</span>]; <span class="regexp">//</span> <span class="string">' '</span></div><div class="line">s[<span class="number">7</span>]; <span class="regexp">//</span> <span class="string">'w'</span></div><div class="line">s[<span class="number">12</span>]; <span class="regexp">//</span> <span class="string">'!'</span></div><div class="line">s[<span class="number">13</span>]; <span class="regexp">//</span> undefined 超出范围的索引不会报错，但一律返回undefined</div></pre></td></tr></table></figure></p>
<p>需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Test'</span>;</div><div class="line">s[<span class="number">0</span>] = <span class="string">'X'</span>;</div><div class="line">alert(s); <span class="comment">// s仍然为'Test'</span></div></pre></td></tr></table></figure></p>
<p>JavaScript为字符串提供了一些常用方法，注意，调用这些方法本身不会改变原有字符串的内容，而是返回一个新字符串：</p>
<p>toUpperCase</p>
<p><code>toUpperCase()</code>把一个字符串全部变为大写：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span>;</div><div class="line">s.toUpperCase(); <span class="comment">// 返回'HELLO'</span></div></pre></td></tr></table></figure></p>
<p>toLowerCase</p>
<p><code>toLowerCase()</code>把一个字符串全部变为小写：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var s = <span class="string">'Hello'</span>;</div><div class="line">var <span class="built_in">lower</span> = s.toLowerCase(); // 返回<span class="string">'hello'</span>并赋值给变量<span class="built_in">lower</span></div><div class="line"><span class="built_in">lower</span>; // <span class="string">'hello'</span></div></pre></td></tr></table></figure></p>
<p>indexOf</p>
<p><code>indexOf()</code>会搜索指定字符串出现的位置：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'hello, world'</span>;</div><div class="line">s.indexOf(<span class="string">'world'</span>); <span class="comment">// 返回7</span></div><div class="line">s.indexOf(<span class="string">'World'</span>); <span class="comment">// 没有找到指定的子串，返回-1</span></div></pre></td></tr></table></figure></p>
<p>substring</p>
<p><code>substring()</code>返回指定索引区间的子串：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var s = <span class="string">'hello, world'</span></div><div class="line">s.substring(<span class="number">0</span>, <span class="number">5</span>); <span class="regexp">//</span> 从索引<span class="number">0</span>开始到<span class="number">5</span>（不包括<span class="number">5</span>），返回<span class="string">'hello'</span></div><div class="line">s.substring(<span class="number">7</span>); <span class="regexp">//</span> 从索引<span class="number">7</span>开始到结束，返回<span class="string">'world'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-(3)字符串&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="js" scheme="http://echoingursb.github.io/tags/js/"/>
    
  </entry>
  
</feed>
