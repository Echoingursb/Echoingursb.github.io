<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHOAMI</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://echoingursb.github.io/"/>
  <updated>2017-09-03T07:27:26.751Z</updated>
  <id>http://echoingursb.github.io/</id>
  
  <author>
    <name>echo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速入门-2数据类型和变量</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门-2数据类型和变量/</id>
    <published>2017-09-03T07:12:08.000Z</published>
    <updated>2017-09-03T07:27:26.751Z</updated>
    
    <content type="html"><![CDATA[<p>快速入门-2数据类型和变量</p>
<a id="more"></a>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在JavaScript中定义了以下几种数据类型：</p>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">123; // 整数123</div><div class="line">0.456; // 浮点数0.456</div><div class="line">1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5</div><div class="line">-99; // 负数</div><div class="line">NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示</div><div class="line">Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</div></pre></td></tr></table></figure>
<p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等，它们和十进制表示的数值完全一样。</p>
<p>Number可以直接做四则运算，规则和数学一致：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1 + 2; // 3</div><div class="line">(1 + 2) * 5 / 2; // 7.5</div><div class="line">2 / 0; // Infinity</div><div class="line">0 / 0; // NaN</div><div class="line">10 % 3; // 1</div><div class="line">10.5 % 3; // 1.5</div></pre></td></tr></table></figure>
<p>注意<code>%</code>是求余运算。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。</p>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>true</code>、<code>false</code>两种值，要么是<code>true</code>，要么是<code>false</code>，可以直接用<code>true</code>、<code>false</code>表示布尔值，也可以通过布尔运算计算出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">true; // 这是一个true值</div><div class="line">false; // 这是一个false值</div><div class="line">2 &gt; 1; // 这是一个true值</div><div class="line">2 &gt;= 3; // 这是一个false值</div></pre></td></tr></table></figure>
<p><code>&amp;&amp;</code>运算是与运算，只有所有都为<code>true</code>，<code>&amp;&amp;</code>运算结果才是<code>true</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">true &amp;&amp; true; // 这个&amp;&amp;语句计算结果为true</div><div class="line">true &amp;&amp; false; // 这个&amp;&amp;语句计算结果为false</div><div class="line">false &amp;&amp; true &amp;&amp; false; // 这个&amp;&amp;语句计算结果为false</div></pre></td></tr></table></figure>
<p><code>||</code>运算是或运算，只要其中有一个为<code>true</code>，<code>||</code>运算结果就是<code>true</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">false || false; // 这个||语句计算结果为false</div><div class="line">true || false; // 这个||语句计算结果为true</div><div class="line">false || true || false; // 这个||语句计算结果为true</div></pre></td></tr></table></figure>
<p><code>!</code>运算是非运算，它是一个单目运算符，把<code>true</code>变成<code>false</code>，false变成true：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">! true; // 结果为false</div><div class="line">! false; // 结果为true</div><div class="line">! (2 &gt; 5); // 结果为true</div></pre></td></tr></table></figure>
<p>布尔值经常用在条件判断中，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var age = 15;</div><div class="line">if (age &gt;= 18) &#123;</div><div class="line">    alert(&apos;adult&apos;);</div><div class="line">&#125; else &#123;</div><div class="line">    alert(&apos;teenager&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p>当我们对Number做比较时，可以通过比较运算符得到一个布尔值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2 &gt; 5; // false</div><div class="line">5 &gt;= 2; // true</div><div class="line">7 == 7; // true</div></pre></td></tr></table></figure>
<p>实际上，JavaScript允许对任意数据类型做比较：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">false == 0; // true</div><div class="line">false === 0; // false</div></pre></td></tr></table></figure>
<p>要特别注意相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：</p>
<p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
<p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>
<p>由于JavaScript这个设计缺陷，不要使用<code>==</code>比较，始终坚持使用<code>===</code>比较。</p>
<p>另一个例外是<code>NaN</code>这个特殊的<code>Number</code>与所有其他值都不相等，包括它自己：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NaN === NaN; // false</div></pre></td></tr></table></figure></p>
<p>唯一能判断NaN的方法是通过isNaN()函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isNaN(NaN); // true</div></pre></td></tr></table></figure></p>
<p>最后要注意浮点数的相等比较：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1 / 3 === (1 - 2 / 3); // false</div></pre></td></tr></table></figure></p>
<p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</div></pre></td></tr></table></figure></p>
<h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><p><code>null</code>表示一个“空”的值，它和<code>0</code>以及空字符串<code>&#39;&#39;</code>不同，<code>0</code>是一个数值，<code>&#39;&#39;</code>表示长度为0的字符串，而<code>null</code>表示“空”。</p>
<p>在其他语言中，也有类似JavaScript的null的表示，例如Java也用<code>null</code>，Swift用<code>nil</code>，Python用<code>None</code>表示。但是，在JavaScript中，还有一个和<code>null</code>类似的<code>undefined</code>，它表示“未定义”。</p>
<p>JavaScript的设计者希望用<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p>
<p>数组</p>
<p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3.14, &apos;Hello&apos;, null, true];</div></pre></td></tr></table></figure></p>
<p>上述数组包含6个元素。数组用<code>[]</code>表示，元素之间用<code>,</code>分隔。</p>
<p>另一种创建数组的方法是通过<code>Array()</code>函数实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new Array(1, 2, 3); // 创建了数组[1, 2, 3]</div></pre></td></tr></table></figure></p>
<p>然而，出于代码的可读性考虑，强烈建议直接使用<code>[]</code>。</p>
<p>数组的元素可以通过索引来访问。请注意，索引的起始值为0：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr = [1, 2, 3.14, &apos;Hello&apos;, null, true];</div><div class="line">arr[0]; // 返回索引为0的元素，即1</div><div class="line">arr[5]; // 返回索引为5的元素，即true</div><div class="line">arr[6]; // 索引超出了范围，返回undefined</div></pre></td></tr></table></figure></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript的对象是一组由键-值组成的无序集合，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line">    name: &apos;Bob&apos;,</div><div class="line">    age: 20,</div><div class="line">    tags: [&apos;js&apos;, &apos;web&apos;, &apos;mobile&apos;],</div><div class="line">    city: &apos;Beijing&apos;,</div><div class="line">    hasCar: true,</div><div class="line">    zipcode: null</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述person对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，<code>person</code>的<code>name</code>属性为<code>&#39;Bob&#39;</code>，<code>zipcode</code>属性为<code>null</code>。</p>
<p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person.name; // &apos;Bob&apos;</div><div class="line">person.zipcode; // null</div></pre></td></tr></table></figure></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。</p>
<p>变量在JavaScript中就是用一个变量名表示，变量名是<code>大小写英文</code>、<code>数字</code>、<code>$</code>和<code>_</code>的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等。申明一个变量用<code>var</code>语句，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a; // 申明了变量a，此时a的值为undefined</div><div class="line">var $b = 1; // 申明了变量$b，同时给$b赋值，此时$b的值为1</div><div class="line">var s_007 = &apos;007&apos;; // s_007是一个字符串</div><div class="line">var Answer = true; // Answer是一个布尔值true</div><div class="line">var t = null; // t的值是null</div></pre></td></tr></table></figure></p>
<p>变量名也可以用中文，但是，请不要给自己找麻烦。</p>
<p>在JavaScript中，使用等号<code>=</code>对变量进行赋值。可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用<code>var</code>申明一次，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a = 123; // a的值是整数123</div><div class="line">a = &apos;ABC&apos;; // a变为字符串</div></pre></td></tr></table></figure></p>
<p>这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int a = 123; // a是整数类型变量，类型用int申明</div><div class="line">a = &quot;ABC&quot;; // 错误：不能把字符串赋给整型变量</div></pre></td></tr></table></figure></p>
<p>和静态语言相比，动态语言更灵活，就是这个原因。</p>
<p>请不要把赋值语句的等号等同于数学的等号。比如下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var x = 10;</div><div class="line">x = x + 2;</div></pre></td></tr></table></figure></p>
<p>如果从数学上理解<code>x = x + 2</code>那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式<code>x + 2</code>，得到结果<code>12</code>，再赋给变量<code>x</code>。由于<code>x</code>之前的值是<code>10</code>，重新赋值后，<code>x</code>的值变成<code>12</code>。</p>
<h2 id="strict模式"><a href="#strict模式" class="headerlink" title="strict模式"></a>strict模式</h2><p>JavaScript在设计之初，为了方便初学者学习，并不强制要求用<code>var</code>申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">i = 10; // i现在是全局变量</div></pre></td></tr></table></figure></p>
<p>在同一个页面的不同的JavaScript文件中，如果都不用<code>var</code>申明，恰好都使用了变量<code>i</code>，将造成变量<code>i</code>互相影响，产生难以调试的错误结果。</p>
<p>使用<code>var</code>申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。</p>
<p>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用var申明变量就使用的，将导致运行错误。</p>
<p>启用strict模式的方法是在JavaScript代码的第一行写上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div></pre></td></tr></table></figure></p>
<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>
<p>来测试一下你的浏览器是否能支持strict模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">// 如果浏览器支持strict模式，</div><div class="line">// 下面的代码将报ReferenceError错误:</div><div class="line">abc = &apos;Hello, world&apos;;</div><div class="line">alert(abc);</div></pre></td></tr></table></figure>
<p>运行代码，如果浏览器报错，请修复后再运行。如果浏览器不报错，说明你的浏览器太古老了，需要尽快升级。</p>
<p>不用<code>var</code>申明的变量会被视为全局变量，为了避免这一缺陷，所有的JavaScript代码都应该使用strict模式。我们在后面编写的JavaScript代码将全部采用strict模式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-2数据类型和变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门-1基本语法</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-1%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门-1基本语法/</id>
    <published>2017-09-03T05:43:59.000Z</published>
    <updated>2017-09-03T07:59:22.526Z</updated>
    
    <content type="html"><![CDATA[<p>快速入门-1基本语法</p>
<a id="more"></a>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>JavaScript的语法和Java语言类似，每个语句以<code>;</code>结束，语句块用<code>{...}</code>。但是，JavaScript并不强制要求在每个语句的结尾加<code>;</code>，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上<code>;</code>。</p>
<p><em>注意：让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致。在本教程中，我们不会省略<code>;</code>，所有语句都会添加<code>;</code>。</em></p>
<p>例如，下面的一行代码就是一个完整的赋值语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var x = 1;</div></pre></td></tr></table></figure>
<p>下面的一行代码是一个字符串，但仍然可以视为一个完整的语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;Hello, World&apos;;</div></pre></td></tr></table></figure>
<p>下面的一行代码包含两个语句，每个语句用;表示语句结束：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var x = 1; var y = 2; // 不建议一行写多个语句!</div></pre></td></tr></table></figure>
<p>语句块是一组语句的集合，例如，下面的代码先做了一个判断，如果判断成立，将执行<code>{...}</code>中的所有语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (2 &gt; 1) &#123;</div><div class="line">    x = 1;</div><div class="line">    y = 2;</div><div class="line">    z = 3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意花括号<code>{...}</code>内的语句具有缩进，通常是4个空格。缩进不是JavaScript语法要求必须的，但缩进有助于我们理解代码的层次，所以编写代码时要遵守缩进规则。很多文本编辑器具有“自动缩进”的功能，可以帮助整理代码。<br><code>{...}</code>还可以嵌套，形成层级结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (2 &gt; 1) &#123;</div><div class="line">    x = 1;</div><div class="line">    y = 2;</div><div class="line">    z = 3;</div><div class="line">    if (x &lt; y) &#123;</div><div class="line">        z = 4;</div><div class="line">    &#125;</div><div class="line">    if (x &gt; y) &#123;</div><div class="line">        z = 5;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JavaScript本身对嵌套的层级没有限制，但是过多的嵌套无疑会大大增加看懂代码的难度。遇到这种情况，需要把部分代码抽出来，作为函数来调用，这样可以减少代码的复杂度。</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>以<code>//</code>开头直到行末的字符被视为行注释，注释是给开发人员看到，JavaScript引擎会自动忽略：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 这是一行注释</div><div class="line">alert(&apos;hello&apos;); // 这也是注释</div></pre></td></tr></table></figure>
<p>另一种块注释是用<code>/*...*/</code>把多行字符包裹起来，把一大“块”视为一个注释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* 从这里开始是块注释</div><div class="line">仍然是注释</div><div class="line">仍然是注释</div><div class="line">注释结束 */</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门-1基本语法&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>快速入门</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>http://echoingursb.github.io/2017/09/03/快速入门/</id>
    <published>2017-09-03T04:10:04.000Z</published>
    <updated>2017-09-03T07:52:18.466Z</updated>
    
    <content type="html"><![CDATA[<p>快速入门</p>
<a id="more"></a>
<p>JavaScript代码可以直接嵌在网页的任何地方，不过通常我们都把JavaScript代码放到<code>&lt;head&gt;</code>中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    alert(<span class="string">'Hello, world'</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  ...</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>由<code>&lt;script&gt;...&lt;/script&gt;</code>包含的代码就是JavaScript代码，它将直接被浏览器执行。</p>
<p>第二种方法是把JavaScript代码放到一个单独的.js文件，然后在HTML中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;script src=&quot;/static/js/abc.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  ...</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>这样，<code>/static/js/abc.js</code>就会被浏览器执行。</p>
<p>把JavaScript代码放入一个单独的.js文件中更利于维护代码，并且多个页面可以各自引用同一份.js文件。</p>
<p>可以在同一个页面中引入多个.js文件，还可以在页面中多次编写<code>&lt;script&gt; js代码... &lt;/script&gt;</code>，浏览器按照顺序依次执行。</p>
<p>有些时候你会看到<code>&lt;script&gt;</code>标签还设置了一个type属性：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  ...</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>但这是没有必要的，因为默认的type就是JavaScript，所以不必显式地把type指定为JavaScript。</p>
<h1 id="如何编写JavaScript"><a href="#如何编写JavaScript" class="headerlink" title="如何编写JavaScript"></a>如何编写JavaScript</h1><p>可以用任何文本编辑器来编写JavaScript代码。这里我们推荐以下几种文本编辑器：</p>
<p>Sublime Text</p>
<p>免费，但不注册会不定时弹出提示框。</p>
<p>Notepad++</p>
<p>免费</p>
<p><em>注意：不可以用Word或写字板来编写JavaScript或HTML，因为带格式的文本保存后不是纯文本文件，无法被浏览器正常读取。</em></p>
<h1 id="如何运行JavaScript"><a href="#如何运行JavaScript" class="headerlink" title="如何运行JavaScript"></a>如何运行JavaScript</h1><p>要让浏览器运行JavaScript，必须先有一个HTML页面，在HTML页面中引入JavaScript，然后，让浏览器加载该HTML页面，就可以执行JavaScript代码。</p>
<p>你也许会想，直接在我的硬盘上创建好HTML和JavaScript文件，然后用浏览器打开，不就可以看到效果了吗？</p>
<p>这种方式运行部分JavaScript代码没有问题，但由于浏览器的安全限制，以<code>file://</code>开头的地址无法执行如联网等JavaScript代码，最终，你还是需要架设一个Web服务器，然后以<code>http://</code>开头的地址来正常执行所有JavaScript代码。</p>
<p>不过，开始学习阶段，你无须关心如何搭建开发环境的问题，我们提供在页面输入JavaScript代码并直接运行的功能，让你专注于JavaScript的学习。</p>
<p>试试直接点击“Run”按钮执行下面的JavaScript代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  // 以//开头直到行末的是注释，将被浏览器忽略</div><div class="line">  // 第一个JavaScript代码:</div><div class="line">  &lt;script&gt;</div><div class="line">    alert(<span class="string">'Hello, world'</span>);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  ...</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>浏览器将弹出一个对话框，显示“Hello, world”。你也可以修改两个单引号中间的内容，再试着运行。</p>
<h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>俗话说得好，“工欲善其事，必先利其器。”，写JavaScript的时候，如果期望显示ABC，结果却显示XYZ，到底代码哪里出了问题？不要抓狂，也不要泄气，作为小白，要坚信：JavaScript本身没有问题，浏览器执行也没有问题，有问题的一定是我的代码。</p>
<p>如何找出问题代码？这就需要调试。</p>
<p>怎么在浏览器中调试JavaScript代码呢？</p>
<p>首先，你需要安装Google Chrome浏览器，Chrome浏览器对开发者非常友好，可以让你方便地调试JavaScript代码。从这里下载<a href="https://www.google.com/chrome/browser/desktop/index.html?system=true&amp;standalone=1" target="_blank" rel="external">Chrome浏览器</a>。 </p>
<p>安装后，随便打开一个网页，然后点击菜单“查看(View)”-“开发者(Developer)”-“开发者工具(Developer Tools)”，浏览器窗口就会一分为二，下方就是开发者工具：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>先点击“控制台(Console)“，在这个面板里可以直接输入JavaScript代码，按回车后执行。</p>
<p>要查看一个变量的内容，在Console中输入<code>console.log(a);</code>，回车后显示的值就是变量的内容。</p>
<p>关闭Console请点击右上角的“×”按钮。请熟练掌握Console的使用方法，在编写JavaScript代码时，经常需要在Console运行测试代码。</p>
<p>如果你对自己还有更高的要求，可以研究开发者工具的“源码(Sources)”，掌握断点、单步执行等高级调试技巧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速入门&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript简介</title>
    <link href="http://echoingursb.github.io/2017/09/03/JavaScript%E7%AE%80%E4%BB%8B/"/>
    <id>http://echoingursb.github.io/2017/09/03/JavaScript简介/</id>
    <published>2017-09-03T03:46:53.000Z</published>
    <updated>2017-09-03T07:38:29.734Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript简介<br><a id="more"></a></p>
<h1 id="JavaScript历史"><a href="#JavaScript历史" class="headerlink" title="JavaScript历史"></a>JavaScript历史</h1><p>要了解JavaScript，我们首先要回顾一下JavaScript的诞生。</p>
<p>在上个世纪的1995年，当时的网景公司正凭借其Navigator浏览器成为Web时代开启时最著名的第一代互联网公司。</p>
<p>由于网景公司希望能在静态HTML页面上添加一些动态效果，于是叫<a href="https://baike.baidu.com/item/Brendan%20Eich/561441?fr=aladdin" target="_blank" rel="external">Brendan Eich</a>这哥们在两周之内设计出了JavaScript语言。你没看错，这哥们只用了10天时间。</p>
<p>为什么起名叫JavaScript？原因是当时Java语言非常红火，所以网景公司希望借Java的名气来推广，但事实上JavaScript除了语法上有点像Java，其他部分基本上没啥关系。</p>
<h1 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h1><p>因为网景开发了JavaScript，一年后微软又模仿JavaScript开发了JScript，为了让JavaScript成为全球标准，几个公司联合ECMA（European Computer Manufacturers Association）组织定制了JavaScript语言的标准，被称为ECMAScript标准。</p>
<p>所以简单说来就是，ECMAScript是一种语言标准，而JavaScript是网景公司对ECMAScript标准的一种实现。</p>
<p>那为什么不直接把JavaScript定为标准呢？因为JavaScript是网景的注册商标。</p>
<p>不过大多数时候，我们还是用JavaScript这个词。如果你遇到ECMAScript这个词，简单把它替换为JavaScript就行了。</p>
<h1 id="JavaScript版本"><a href="#JavaScript版本" class="headerlink" title="JavaScript版本"></a>JavaScript版本</h1><p>JavaScript语言是在10天时间内设计出来的，虽然语言的设计者水平非常NB，但谁也架不住“时间紧，任务重”，所以，JavaScript有很多设计缺陷，我们后面会慢慢讲到。</p>
<p>此外，由于JavaScript的标准——ECMAScript在不断发展，最新版ECMAScript 6标准（简称ES6）已经在2015年6月正式发布了，所以，讲到JavaScript的版本，实际上就是说它实现了ECMAScript标准的哪个版本。</p>
<p>由于浏览器在发布时就确定了JavaScript的版本，加上很多用户还在使用IE6这种古老的浏览器，这就导致你在写JavaScript的时候，要照顾一下老用户，不能一上来就用最新的ES6标准写，否则，老用户的浏览器是无法运行新版本的JavaScript代码的。</p>
<p>不过，JavaScript的核心语法并没有多大变化。我们的教程会先讲JavaScript最核心的用法，然后，针对ES6讲解新增特性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript简介&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="javascript" scheme="http://echoingursb.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>【进阶版】有道云笔记Markdown指南</title>
    <link href="http://echoingursb.github.io/2017/09/03/%E3%80%90%E8%BF%9B%E9%98%B6%E7%89%88%E3%80%91%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0Markdown%E6%8C%87%E5%8D%97/"/>
    <id>http://echoingursb.github.io/2017/09/03/【进阶版】有道云笔记Markdown指南/</id>
    <published>2017-09-03T03:34:49.000Z</published>
    <updated>2017-09-03T03:35:57.354Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown语法(有道云笔记)" scheme="http://echoingursb.github.io/tags/Markdown%E8%AF%AD%E6%B3%95-%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>【简明版】有道云笔记Markdown指南</title>
    <link href="http://echoingursb.github.io/2017/09/01/%E3%80%90%E7%AE%80%E6%98%8E%E7%89%88%E3%80%91%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0Markdown%E6%8C%87%E5%8D%97%20/"/>
    <id>http://echoingursb.github.io/2017/09/01/【简明版】有道云笔记Markdown指南 /</id>
    <published>2017-09-01T02:08:36.000Z</published>
    <updated>2017-09-01T02:49:08.393Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Markdown？Markdown是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。</p>
<p>有道云笔记内置Markdown编辑器和使用指南，非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p>
<p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。</p>
<a id="more"></a>
<h2 id="一-利用Markdown可以做什么？"><a href="#一-利用Markdown可以做什么？" class="headerlink" title="一.利用Markdown可以做什么？"></a>一.利用Markdown可以做什么？</h2><ul>
<li>1.代码高亮</li>
</ul>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>2.制作待办事项To-do List</li>
</ul>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>3.高效绘制流程图、序列图、甘特图、表格</li>
</ul>
<p>流程图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>序列图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>甘特图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>表格：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>4.书写数学公式</li>
</ul>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<h2 id="二-有道云笔记Markdown简明版使用指南"><a href="#二-有道云笔记Markdown简明版使用指南" class="headerlink" title="二.有道云笔记Markdown简明版使用指南"></a>二.有道云笔记Markdown简明版使用指南</h2><ul>
<li>1.标题</li>
</ul>
<p>标题是每篇文章必备而且最常用的格式。</p>
<p>在Markdown中，如果想将一段文字定义为标题，只需要在这段文字前面加上 #，再在 # 后加一个空格即可。还可增加二、三、四、五、六级标题，总共六级，只需要增加 # ，增加一个 # ，标题字号相应降低一级。如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>2.列表</li>
</ul>
<p>列表格式也很常用，它可以让你的文稿变得井井有条。在 Markdown 中，你只需要在文字前面加上 - 就可以了；如果你希望是有序列表，在文字前面加上 1. 2. 3. 即可。</p>
<blockquote>
<p><em>注：-、1.和文字之间要保留一个字符的空格。</em></p>
</blockquote>
<ul>
<li>3.引用</li>
</ul>
<p>如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。</p>
<p>在引用文字前加上 &gt; 并与文字保留一个字符的空格，即可。</p>
<ul>
<li>4.粗体和斜体</li>
</ul>
<p>Markdown 的粗体和斜体也非常简单：</p>
<p>用两个 * 包含一段文本就是体的语法；</p>
<p>用一个 * 包含一段文本就是斜体的语法。</p>
<ul>
<li>5.链接与图片</li>
</ul>
<p>链接：在 Markdown 中，插入链接只需要使用 <a href="链接地址">显示文本</a> 即可。</p>
<p>图片：在 Markdown 中，插入图片只需要使用 <img src="图片链接地址" alt="显示文本">即可。</p>
<p>注：插入图片的语法和链接的语法很像，只是前面多了一个 ！</p>
<ul>
<li>6.分割线</li>
</ul>
<p>分割线的语法只需要另起一行，连续输入三个星号 <em>*</em> 即可分割两段文字内容。</p>
<p>如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ul>
<li>7.表格</li>
</ul>
<p>当你需要在Markdown文稿中键入表格，代码如下：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>示例参考：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<blockquote>
<p><em>如上7大格式是写作文稿时最常使用的</em>。</p>
</blockquote>
<p>怎么样，看了相关Markdown语法是不是觉得挺简单？</p>
<p>当然，Markdown新手在使用不熟练的情况下，可能会忘记相关语法，也没关系，笔记的工具栏内置了Markdown语法，方便学习与熟悉。</p>
<p>如，「表格」语法相对复杂，你可能忘记了，这时候，你只需要点击编辑框上方工具栏，点选「表格」的图标，左边编辑区便会出现「表格」相应代码：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>然后，你只需要将代码替换成相应文本即可，如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>熟悉语法之后，还是建议大家少使用辅助工具栏，尽量自己键入代码，感受纯文本之美。</p>
<p>当然，有道云笔记的Markdown还能支持制作待办事项，书写流程图、序列图、甘特图，书写数学公式等，是不是够极客，够有逼格？</p>
<p>看看笔记菌用Markdown甘特图写的项目计划时间表：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<blockquote>
<p>Tips for 有道云笔记中的 Markdown</p>
</blockquote>
<ul>
<li>1.实时同步预览，所看即所得</li>
</ul>
<p>我们将笔记编辑界面一分为二，左边为编辑区，右边为预览区，两区滚动条同步。在编辑区的操作能够实时反映在预览区，方便及时调整和查看最终版面效果。</p>
<ul>
<li>2.工具栏内置Markdown语法，方便新手学习</li>
</ul>
<p>编辑页面顶端的工具栏有对应代码，如果你是一个不熟悉Markdown语法的新手，可以先尝试用工具栏辅助操作。也可以在网上搜索「Markdown语法指南」进行学习。</p>
<p>当然，如果你觉得工具栏太打扰，点击下方分界条即可隐藏工具栏，切换到极简编辑环境。</p>
<ul>
<li>3.实时云端保存</li>
</ul>
<p>Markdown模式继承了有道云笔记的优良传统，你每一次击键的内容都会实时保存在云端，无需担心浏览器崩溃、设备没电、突然断网等情况。对于写作者来说，更是再也不用担心因为各种原因痛失文稿的情况了。</p>
<ul>
<li>4.界面大小可点击分界条调整。</li>
</ul>
<p>点击“1”处，工具栏收起；</p>
<p>点击“2”处，右侧预览区收起。</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>点击后效果如图：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<blockquote>
<p>传送门：</p>
<ul>
<li><a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="external">【简明版】有道云笔记Markdown指南</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是Markdown？Markdown是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。&lt;/p&gt;
&lt;p&gt;有道云笔记内置Markdown编辑器和使用指南，非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。&lt;/p&gt;
&lt;p&gt;就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Markdown语法(有道云笔记)" scheme="http://echoingursb.github.io/tags/Markdown%E8%AF%AD%E6%B3%95-%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>单词</title>
    <link href="http://echoingursb.github.io/2017/08/30/%E5%8D%95%E8%AF%8D/"/>
    <id>http://echoingursb.github.io/2017/08/30/单词/</id>
    <published>2017-08-30T01:07:30.000Z</published>
    <updated>2017-09-02T04:08:15.840Z</updated>
    
    <content type="html"><![CDATA[<p>在这里总结一下遇到的单词，方便自己学习和查阅。<br><a id="more"></a></p>
<ul>
<li>A</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>asynchronous</td>
<td>英 [eɪˈsɪŋkrənəs]   美 [e’sɪŋkrənəs]</td>
<td>adj.异步的</td>
</tr>
<tr>
<td>annotation</td>
<td>英 [ˌænə’teɪʃn]   美 [ˌænə’teɪʃn]</td>
<td>n.注释</td>
</tr>
</tbody>
</table>
<ul>
<li>B</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>BMI</td>
<td></td>
<td>n.Body Mass Index （体质指数）</td>
</tr>
</tbody>
</table>
<ul>
<li>C</li>
</ul>
<table>
<thead>
<tr>
<th>单词</th>
<th>发音</th>
<th>释义 </th>
</tr>
</thead>
<tbody>
<tr>
<td>concatenate</td>
<td>英 [kɒn’kætɪneɪt]   美 [kɑnˈkæt(ə)ˌneɪt]</td>
<td>vt.把 （一系列事件、事情等）联系起来；连接   adj. 连接的，联系在一起的</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里总结一下遇到的单词，方便自己学习和查阅。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="http://echoingursb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="单词" scheme="http://echoingursb.github.io/tags/%E5%8D%95%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>HelloWorld</title>
    <link href="http://echoingursb.github.io/2017/08/28/HelloWorld/"/>
    <id>http://echoingursb.github.io/2017/08/28/HelloWorld/</id>
    <published>2017-08-28T05:14:46.000Z</published>
    <updated>2017-08-29T05:24:55.007Z</updated>
    
    <content type="html"><![CDATA[<p>我有一头小毛驴，我从来也不骑 (=・ω・=)<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  ((`&apos;-&quot;``&quot;&quot;-&apos;`)) </div><div class="line">   )   -    -  ( </div><div class="line">  /   (o _ o)   \ </div><div class="line">  \    ( 0 )    / </div><div class="line">  _&apos;-.._&apos;=&apos;_..-&apos;_ </div><div class="line">/`;#&apos;#&apos;#.-.#&apos;#&apos;#;`\ </div><div class="line">\_))    &apos;#&apos;    ((_/ </div><div class="line">  #.  ☆ ☆ ☆   # </div><div class="line">  &apos;#.         .#&apos;           </div><div class="line">  / &apos;#.      .#&apos; \ </div><div class="line"> _\  \&apos;#. .#&apos;/  /_ </div><div class="line">(((___) &apos;#&apos; (___)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我有一头小毛驴，我从来也不骑 (=・ω・=)&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://echoingursb.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://echoingursb.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
</feed>
